{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { whereImpl } from '../backends/where_impl';\nimport { convertToTensor } from '../tensor_util_env';\n/**\r\n * Returns the coordinates of true elements of condition.\r\n *\r\n * The coordinates are returned in a 2-D tensor where the first dimension (rows)\r\n * represents the number of true elements, and the second dimension (columns)\r\n * represents the coordinates of the true elements. Keep in mind, the shape of\r\n * the output tensor can vary depending on how many true values there are in\r\n * input. Indices are output in row-major order. The resulting tensor has the\r\n * shape `[numTrueElems, condition.rank]`.\r\n *\r\n * This is analogous to calling the python `tf.where(cond)` without an x or y.\r\n *\r\n * ```js\r\n * const cond = tf.tensor1d([false, false, true], 'bool');\r\n * const result = await tf.whereAsync(cond);\r\n * result.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\nasync function whereAsync_(condition) {\n  const $condition = convertToTensor(condition, 'condition', 'whereAsync', 'bool');\n  const vals = await $condition.data();\n  const res = whereImpl($condition.shape, vals);\n  if (condition !== $condition) {\n    $condition.dispose();\n  }\n  return res;\n}\nexport const whereAsync = whereAsync_;","map":null,"metadata":{},"sourceType":"module"}