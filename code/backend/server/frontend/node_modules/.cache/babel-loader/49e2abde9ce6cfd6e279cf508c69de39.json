{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { ScatterNd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport * as scatter_nd_util from './scatter_nd_util';\n/**\r\n * Creates a new tensor by applying sparse updates to individual\r\n * values or slices within a zero tensor of the given shape tensor according to\r\n * indices. This operator is the inverse of the `tf.gatherND` operator which\r\n * extracts values or slices from a given tensor.\r\n *\r\n * ```js\r\n * const indices = tf.tensor2d([4, 3, 1, 7], [4, 1], 'int32');\r\n * const updates = tf.tensor1d([9, 10, 11, 12]);\r\n * const shape = [8];\r\n * tf.scatterND(indices, updates, shape).print() //[0, 11, 0, 10, 9, 0, 0, 12]\r\n * ```\r\n *\r\n * @param indices The tensor contains the indices into the output tensor.\r\n * @param updates The tensor contains the value for the indices.\r\n * @param shape: The shape of the output tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\r\n */\nfunction scatterND_(indices, updates, shape) {\n  const $indices = convertToTensor(indices, 'indices', 'scatterND', 'int32');\n  const $updates = convertToTensor(updates, 'updates', 'scatterND');\n  scatter_nd_util.validateInput($updates, $indices, shape);\n  const inputs = {\n    indices: $indices,\n    updates: $updates\n  };\n  const attrs = {\n    shape\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(ScatterNd, inputs, attrs);\n}\nexport const scatterND = op({\n  scatterND_\n});","map":null,"metadata":{},"sourceType":"module"}