{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, isInt } from '../util';\nimport { op } from './operation';\n/**\r\n * Computes the sum along segments of a `tf.Tensor`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\r\n * const numSegments = 3;\r\n *\r\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\r\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\r\n * ```\r\n * @param x The `tf.Tensor` that will be summed along its segments.\r\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\r\n * dimension along the `axis`.  Maps each element of `x` to a segment.\r\n * @param numSegments The number of distinct `segmentIds`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Segment'}\r\n */\nfunction unsortedSegmentSum_(x, segmentIds, numSegments) {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n  const inputs = {\n    x: $x,\n    segmentIds: $segmentIds\n  };\n  const attrs = {\n    numSegments\n  };\n  return ENGINE.runKernel(UnsortedSegmentSum, inputs, attrs);\n}\nexport const unsortedSegmentSum = op({\n  unsortedSegmentSum_\n});","map":null,"metadata":{},"sourceType":"module"}