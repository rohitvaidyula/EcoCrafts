{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n/**\r\n * Classes and functions for model management across multiple storage mediums.\r\n *\r\n * Supported client actions:\r\n * - Listing models on all registered storage mediums.\r\n * - Remove model by URL from any registered storage mediums, by using URL\r\n *   string.\r\n * - Moving or copying model from one path to another in the same medium or from\r\n *   one medium to another, by using URL strings.\r\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n  constructor() {\n    this.managers = {};\n  }\n  static getInstance() {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n  /**\r\n   * Register a save-handler router.\r\n   *\r\n   * @param saveRouter A function that maps a URL-like string onto an instance\r\n   * of `IOHandler` with the `save` method defined or `null`.\r\n   */\n  static registerManager(scheme, manager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n  static getManager(scheme) {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n  static getSchemes() {\n    return Object.keys(this.getInstance().managers);\n  }\n}\n/**\r\n * Helper method for parsing a URL string into a scheme and a path.\r\n *\r\n * @param url E.g., 'localstorage://my-model'\r\n * @returns A dictionary with two fields: scheme and path.\r\n *   Scheme: e.g., 'localstorage' in the example above.\r\n *   Path: e.g., 'my-model' in the example above.\r\n */\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\nasync function cloneModelInternal(sourceURL, destURL, deleteSource = false) {\n  assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n  assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);\n  assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n  const modelArtifacts = await loadHandler.load();\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  const saveResult = await saveHandler.save(modelArtifacts);\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n  return saveResult.modelArtifactsInfo;\n}\n/**\r\n * List all models stored in registered storage mediums.\r\n *\r\n * For a web browser environment, the registered mediums are Local Storage and\r\n * IndexedDB.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\r\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\r\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\r\n * model's topology, byte sizes of the topology, weights, etc.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nasync function listModels() {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out = {};\n  for (const scheme of schemes) {\n    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n/**\r\n * Remove a model specified by URL from a reigstered storage medium.\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Delete the model.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n * ```\r\n *\r\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\r\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\r\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\r\n *   is successful).\r\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nasync function removeModel(url) {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n/**\r\n * Copy a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Copying within a storage medium, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Copying between two storage mediums, e.g.,\r\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Copy the model, from Local Storage to IndexedDB.\r\n * await tf.io.copyModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove both models.\r\n * await tf.io.removeModel('localstorage://demo/management/model1');\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of copying.\r\n * @param destURL Destination URL of copying.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nasync function copyModel(sourceURL, destURL) {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\r\n * Move a model from one URL to another.\r\n *\r\n * This function supports:\r\n *\r\n * 1. Moving within a storage medium, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\r\n * 2. Moving between two storage mediums, e.g.,\r\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\r\n *\r\n * ```js\r\n * // First create and save a model.\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * await model.save('localstorage://demo/management/model1');\r\n *\r\n * // Then list existing models.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Move the model, from Local Storage to IndexedDB.\r\n * await tf.io.moveModel(\r\n *     'localstorage://demo/management/model1',\r\n *     'indexeddb://demo/management/model1');\r\n *\r\n * // List models again.\r\n * console.log(JSON.stringify(await tf.io.listModels()));\r\n *\r\n * // Remove the moved model.\r\n * await tf.io.removeModel('indexeddb://demo/management/model1');\r\n * ```\r\n *\r\n * @param sourceURL Source URL of moving.\r\n * @param destURL Destination URL of moving.\r\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\r\n *   is successful).\r\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\r\n *   if `oldPath` and `newPath` are identical.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Management',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nasync function moveModel(sourceURL, destURL) {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\nexport { moveModel, copyModel, removeModel, listModels };","map":null,"metadata":{},"sourceType":"module"}