{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { assert } from '../util';\n/**\r\n * Monitor Promise.all progress, fire onProgress callback function.\r\n *\r\n * @param promises Promise list going to be monitored\r\n * @param onProgress Callback function. Fired when a promise resolved.\r\n * @param startFraction Optional fraction start. Default to 0.\r\n * @param endFraction Optional fraction end. Default to 1.\r\n */\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n  const registerMonitor = promise => {\n    promise.then(value => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n  }\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);\n    assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);\n    assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);\n  }\n  return Promise.all(promises.map(registerMonitor));\n}","map":null,"metadata":{},"sourceType":"module"}