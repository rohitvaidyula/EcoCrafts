{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n  const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  const outputDType = sumOutType(x.dtype);\n  const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      numSegments\n    };\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n    toDispose.push(output);\n    // No need to run another GPGPU program.\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n    const rangeInfo = range({\n      backend,\n      attrs: {\n        start: 0,\n        stop: numSegments,\n        step: 1,\n        dtype: 'float32'\n      }\n    });\n    const tileInfo = tile({\n      inputs: {\n        x: rangeInfo\n      },\n      backend,\n      attrs: {\n        reps: [inSize / windowSize]\n      }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n    return result;\n  };\n  const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n  const reshaped = reshape({\n    inputs: {\n      x: segOpResult\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm\n      }\n    });\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum\n};","map":null,"metadata":{},"sourceType":"module"}