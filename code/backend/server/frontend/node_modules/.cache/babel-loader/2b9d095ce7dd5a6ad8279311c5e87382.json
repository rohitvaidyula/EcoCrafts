{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { SplitV } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Splits a `tf.Tensor` into sub tensors.\r\n *\r\n * If `numOrSizeSplits` is a number, splits `x` along dimension `axis`\r\n * into `numOrSizeSplits` smaller tensors.\r\n * Requires that `numOrSizeSplits` evenly divides `x.shape[axis]`.\r\n *\r\n * If `numOrSizeSplits` is a number array, splits `x` into\r\n * `numOrSizeSplits.length` pieces. The shape of the `i`-th piece has the\r\n * same size as `x` except along dimension `axis` where the size is\r\n * `numOrSizeSplits[i]`.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4, 5, 6, 7, 8], [2, 4]);\r\n * const [a, b] = tf.split(x, 2, 1);\r\n * a.print();\r\n * b.print();\r\n *\r\n * const [c, d, e] = tf.split(x, [1, 2, 1], 1);\r\n * c.print();\r\n * d.print();\r\n * e.print();\r\n * ```\r\n *\r\n * @param x The input tensor to split.\r\n * @param numOrSizeSplits Either an integer indicating the number of\r\n * splits along the axis or an array of integers containing the sizes of\r\n * each output tensor along the axis. If a number then it must evenly divide\r\n * `x.shape[axis]`; otherwise the sum of sizes must match `x.shape[axis]`.\r\n * Can contain one -1 indicating that dimension is to be inferred.\r\n * @param axis The dimension along which to split. Defaults to 0 (the first\r\n * dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction split_(x, numOrSizeSplits, axis = 0) {\n  const $x = convertToTensor(x, 'x', 'split');\n  const inputs = {\n    x: $x\n  };\n  const attr = {\n    numOrSizeSplits,\n    axis\n  };\n  return ENGINE.runKernel(SplitV, inputs, attr);\n}\nexport const split = op({\n  split_\n});","map":null,"metadata":{},"sourceType":"module"}