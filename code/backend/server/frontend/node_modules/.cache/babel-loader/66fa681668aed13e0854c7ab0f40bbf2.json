{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { DenseBincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Outputs a vector with length `size` and the same dtype as `weights`.\r\n *\r\n * If `weights` are empty, then index `i` stores the number of times the value\r\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\r\n * sum of the value in `weights` at each index where the corresponding value in\r\n * `x` is `i`.\r\n *\r\n * Values in `x` outside of the range [0, size) are ignored.\r\n *\r\n * @param x The input int tensor, rank 1 or rank 2.\r\n * @param weights The weights tensor, must have the same shape as x, or a\r\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\r\n * @param size Non-negative integer.\r\n * @param binaryOutput Optional. Whether the kernel should count the appearance\r\n *     or number of occurrences. Defaults to False.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\nfunction denseBincount_(x, weights, size, binaryOutput = false) {\n  const $x = convertToTensor(x, 'x', 'denseBincount');\n  const $weights = convertToTensor(weights, 'weights', 'denseBincount');\n  util.assert($x.dtype === 'int32', () => `Error in denseBincount: input ` + `dtype must be int32, but got ${$x.dtype}`);\n  util.assert($x.rank <= 2, () => `Error in denseBincount: input must be at most rank 2, but got ` + `rank ${$x.rank}.`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in denseBincount: weights must have the same shape as x or ` + `0-length, but got x shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);\n  const inputs = {\n    x: $x,\n    weights: $weights\n  };\n  const attrs = {\n    size,\n    binaryOutput\n  };\n  return ENGINE.runKernel(DenseBincount, inputs, attrs);\n}\nexport const denseBincount = op({\n  denseBincount_\n});","map":null,"metadata":{},"sourceType":"module"}