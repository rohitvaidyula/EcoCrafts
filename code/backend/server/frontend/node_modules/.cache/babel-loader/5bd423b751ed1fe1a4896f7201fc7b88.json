{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { cast } from './cast';\nimport { mean } from './mean';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { square } from './square';\nimport { sub } from './sub';\n/**\r\n * Calculates the mean and variance of `x`. The mean and variance are\r\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\r\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\r\n *\r\n * @param x The input tensor.\r\n * @param axis The dimension(s) along with to compute mean and\r\n *     variance. By default it reduces all dimensions.\r\n * @param keepDims If true, the moments have the same dimensionality as the\r\n *     input.\r\n * @return An object with two keys: `mean` and `variance`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Normalization'}\r\n */\nfunction moments_(x, axis = null, keepDims = false) {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {\n    mean: xMean,\n    variance\n  };\n}\nexport const moments = op({\n  moments_\n});","map":null,"metadata":{},"sourceType":"module"}