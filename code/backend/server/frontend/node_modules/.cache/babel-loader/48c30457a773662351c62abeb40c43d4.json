{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\r\n * Returns the kernel function (code) associated with the provided names.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n */\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\r\n * Returns the registered gradient info associated with the provided kernel.\r\n * @param kernelName The official TF kernel name.\r\n */\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n/**\r\n * Registers the function (forward pass) for the kernel in a global registry.\r\n *\r\n * @param config A config object with the following properties:\r\n * - `kernelName` The official name of the kernel.\r\n * - `backendName` The official name of the backend.\r\n * - `kernelFunc` The function to run during the forward pass of the kernel.\r\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\r\n * - `disposeFunc` Optional. Gets called once, right before the backend is\r\n * disposed.\r\n */\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    console.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n/**\r\n * Registers a gradient function for a given kernel in the global registry,\r\n * to be used during the back-propagation of that kernel.\r\n *\r\n * @param config An object with the following properties:\r\n * - `kernelName` The name of the kernel that the gradient function is for.\r\n * - `gradFunc` The function to run during back-propagation.\r\n */\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      console.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n/**\r\n * Removes the kernel function from the registry.\r\n *\r\n * @param kernelName The official name of the kernel.\r\n * @param backendName The official name of the backend.\r\n *\r\n */\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n/**\r\n * Finds kernels that have already been registered to a backend and re-registers\r\n * them for a new backend. Useful for registering custom backends.\r\n * @param registeredBackendName Already registered backend.\r\n * @param newBackendName New backend.\r\n */\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":null,"metadata":{},"sourceType":"module"}