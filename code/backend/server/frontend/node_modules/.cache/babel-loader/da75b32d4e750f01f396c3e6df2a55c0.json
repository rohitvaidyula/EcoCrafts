{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { assert } from '../../util';\nimport { div } from '../div';\nimport { mul } from '../mul';\nimport { norm } from '../norm';\nimport { op } from '../operation';\nimport { split } from '../split';\nimport { squeeze } from '../squeeze';\nimport { stack } from '../stack';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\n/**\r\n * Gram-Schmidt orthogonalization.\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([[1, 2], [3, 4]]);\r\n * let y = tf.linalg.gramSchmidt(x);\r\n * y.print();\r\n * console.log('Othogonalized:');\r\n * y.dot(y.transpose()).print();  // should be nearly the identity matrix.\r\n * console.log('First row direction maintained:');\r\n * const data = await y.array();\r\n * console.log(data[0][1] / data[0][0]);  // should be nearly 2.\r\n * ```\r\n *\r\n * @param xs The vectors to be orthogonalized, in one of the two following\r\n *   formats:\r\n *   - An Array of `tf.Tensor1D`.\r\n *   - A `tf.Tensor2D`, i.e., a matrix, in which case the vectors are the rows\r\n *     of `xs`.\r\n *   In each case, all the vectors must have the same length and the length\r\n *   must be greater than or equal to the number of vectors.\r\n * @returns The orthogonalized and normalized vectors or matrix.\r\n *   Orthogonalization means that the vectors or the rows of the matrix\r\n *   are orthogonal (zero inner products). Normalization means that each\r\n *   vector or each row of the matrix has an L2 norm that equals `1`.\r\n *\r\n * @doc {heading:'Operations', subheading:'Linear Algebra', namespace:'linalg'}\r\n */\nfunction gramSchmidt_(xs) {\n  let inputIsTensor2D;\n  if (Array.isArray(xs)) {\n    inputIsTensor2D = false;\n    assert(xs != null && xs.length > 0, () => 'Gram-Schmidt process: input must not be null, undefined, or ' + 'empty');\n    const dim = xs[0].shape[0];\n    for (let i = 1; i < xs.length; ++i) {\n      assert(xs[i].shape[0] === dim, () => 'Gram-Schmidt: Non-unique lengths found in the input vectors: ' + `(${xs[i].shape[0]} vs. ${dim})`);\n    }\n  } else {\n    inputIsTensor2D = true;\n    xs = split(xs, xs.shape[0], 0).map(x => squeeze(x, [0]));\n  }\n  assert(xs.length <= xs[0].shape[0], () => `Gram-Schmidt: Number of vectors (${xs.length}) exceeds ` + `number of dimensions (${xs[0].shape[0]}).`);\n  const ys = [];\n  const xs1d = xs;\n  for (let i = 0; i < xs.length; ++i) {\n    ys.push(ENGINE.tidy(() => {\n      let x = xs1d[i];\n      if (i > 0) {\n        for (let j = 0; j < i; ++j) {\n          const proj = mul(sum(mul(ys[j], x)), ys[j]);\n          x = sub(x, proj);\n        }\n      }\n      return div(x, norm(x, 'euclidean'));\n    }));\n  }\n  if (inputIsTensor2D) {\n    return stack(ys, 0);\n  } else {\n    return ys;\n  }\n}\nexport const gramSchmidt = op({\n  gramSchmidt_\n});","map":null,"metadata":{},"sourceType":"module"}