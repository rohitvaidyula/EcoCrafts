{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { TensorBuffer } from '../tensor';\nimport * as util from '../util';\n/**\r\n * Creates an empty `tf.TensorBuffer` with the specified `shape` and `dtype`.\r\n *\r\n * The values are stored in CPU as `TypedArray`. Fill the buffer using\r\n * `buffer.set()`, or by modifying directly `buffer.values`.\r\n *\r\n * When done, call `buffer.toTensor()` to get an immutable `tf.Tensor` with\r\n * those values.\r\n *\r\n * ```js\r\n * // Create a buffer and set values at particular indices.\r\n * const buffer = tf.buffer([2, 2]);\r\n * buffer.set(3, 0, 0);\r\n * buffer.set(5, 1, 0);\r\n *\r\n * // Convert the buffer back to a tensor.\r\n * buffer.toTensor().print();\r\n * ```\r\n *\r\n * @param shape An array of integers defining the output tensor shape.\r\n * @param dtype The dtype of the buffer. Defaults to 'float32'.\r\n * @param values The values of the buffer as `TypedArray`. Defaults to\r\n * zeros.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\nexport function buffer(shape, dtype = 'float32', values) {\n  dtype = dtype || 'float32';\n  util.assertNonNegativeIntegerDimensions(shape);\n  return new TensorBuffer(shape, dtype, values);\n}","map":null,"metadata":{},"sourceType":"module"}