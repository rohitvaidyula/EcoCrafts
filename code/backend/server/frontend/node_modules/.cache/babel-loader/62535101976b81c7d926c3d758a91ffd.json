{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Tile } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Construct a tensor by repeating it the number of times given by reps.\r\n *\r\n * This operation creates a new tensor by replicating `input` `reps`\r\n * times. The output tensor's i'th dimension has `input.shape[i] *\r\n * reps[i]` elements, and the values of `input` are replicated\r\n * `reps[i]` times along the i'th dimension. For example, tiling\r\n * `[a, b, c, d]` by `[2]` produces `[a, b, c, d, a, b, c, d]`.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n *\r\n * a.tile([2]).print();    // or a.tile([2])\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * a.tile([1, 2]).print();  // or a.tile([1, 2])\r\n * ```\r\n * @param x The tensor to tile.\r\n * @param reps Determines the number of replications per dimension.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction tile_(x, reps) {\n  const $x = convertToTensor(x, 'x', 'tile', 'string_or_numeric');\n  util.assert($x.rank === reps.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of reps ${reps}.`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    reps\n  };\n  return ENGINE.runKernel(Tile, inputs, attrs);\n}\nexport const tile = op({\n  tile_\n});","map":null,"metadata":{},"sourceType":"module"}