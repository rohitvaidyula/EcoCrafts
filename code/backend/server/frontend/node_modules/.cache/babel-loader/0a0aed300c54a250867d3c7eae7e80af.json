{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nconst delayCallback = (() => {\n  if (typeof requestAnimationFrame !== 'undefined') {\n    return requestAnimationFrame;\n  } else if (typeof setImmediate !== 'undefined') {\n    return setImmediate;\n  }\n  return f => f(); // no delays\n})();\n/**\r\n * Returns a promise that resolve when a requestAnimationFrame has completed.\r\n *\r\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\r\n *\r\n * This is simply a sugar method so that users can do the following:\r\n * `await tf.nextFrame();`\r\n *\r\n * @doc {heading: 'Performance', subheading: 'Timing'}\r\n */\nfunction nextFrame() {\n  return new Promise(resolve => delayCallback(() => resolve()));\n}\nexport { nextFrame };","map":null,"metadata":{},"sourceType":"module"}