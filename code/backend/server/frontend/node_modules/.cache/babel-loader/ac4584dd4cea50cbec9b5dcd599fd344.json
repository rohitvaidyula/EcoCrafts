{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n/**\r\n * Hashtable contains a set of tensors, which can be accessed by key.\r\n */\nexport class HashTable {\n  /**\r\n   * Constructor of HashTable. Creates a hash table.\r\n   *\r\n   * @param keyDType `dtype` of the table keys.\r\n   * @param valueDType `dtype` of the table values.\r\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n  get id() {\n    return this.handle.id;\n  }\n  /**\r\n   * Dispose the tensors and handle and clear the hashtable.\r\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\r\n   * The number of items in the hash table.\r\n   */\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\r\n   * Replaces the contents of the table with the specified keys and values.\r\n   * @param keys Keys to store in the hashtable.\r\n   * @param values Values to store in the hashtable.\r\n   */\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values);\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n      return this.handle;\n    });\n  }\n  /**\r\n   * Looks up keys in a hash table, outputs the corresponding values.\r\n   *\r\n   * Performs batch lookups, for every element in the key tensor, `find`\r\n   * stacks the corresponding value into the return tensor.\r\n   *\r\n   * If an element is not present in the table, the given `defaultValue` is\r\n   * used.\r\n   *\r\n   * @param keys Keys to look up. Must have the same type as the keys of the\r\n   *     table.\r\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\r\n   *     not present in the table. It must also be of the same type as the\r\n   *     table values.\r\n   */\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n      return stack(result);\n    });\n  }\n  // tslint:disable-next-line: no-any\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}