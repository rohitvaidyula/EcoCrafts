{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\r\n * Expands input into frames of frameLength.\r\n * Slides a window size with frameStep.\r\n *\r\n * ```js\r\n * tf.signal.frame([1, 2, 3], 2, 1).print();\r\n * ```\r\n * @param signal The input tensor to be expanded\r\n * @param frameLength Length of each frame\r\n * @param frameStep The frame hop size in samples.\r\n * @param padEnd Whether to pad the end of signal with padValue.\r\n * @param padValue An number to use where the input signal does\r\n *     not exist when padEnd is True.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */\nfunction frame_(signal, frameLength, frameStep, padEnd = false, padValue = 0) {\n  let start = 0;\n  const output = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = start + frameLength - signal.size;\n      const pad = concat([slice(signal, start, frameLength - padLen), fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({\n  frame_\n});","map":null,"metadata":{},"sourceType":"module"}