{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\nimport { ValueError } from '../errors';\n// tslint:enable\n/**\r\n * Determine whether the input is an Array of Shapes.\r\n */\nexport function isArrayOfShapes(x) {\n  return Array.isArray(x) && Array.isArray(x[0]);\n}\n/**\r\n * Special case of normalizing shapes to lists.\r\n *\r\n * @param x A shape or list of shapes to normalize into a list of Shapes.\r\n * @return A list of Shapes.\r\n */\nexport function normalizeShapeList(x) {\n  if (x.length === 0) {\n    return [];\n  }\n  if (!Array.isArray(x[0])) {\n    return [x];\n  }\n  return x;\n}\n/**\r\n * Helper function to obtain exactly one Tensor.\r\n * @param xs: A single `tf.Tensor` or an `Array` of `tf.Tensor`s.\r\n * @return A single `tf.Tensor`. If `xs` is an `Array`, return the first one.\r\n * @throws ValueError: If `xs` is an `Array` and its length is not 1.\r\n */\nexport function getExactlyOneTensor(xs) {\n  let x;\n  if (Array.isArray(xs)) {\n    if (xs.length !== 1) {\n      throw new ValueError(`Expected Tensor length to be 1; got ${xs.length}`);\n    }\n    x = xs[0];\n  } else {\n    x = xs;\n  }\n  return x;\n}\n/**\r\n * Helper function to obtain exactly on instance of Shape.\r\n *\r\n * @param shapes Input single `Shape` or Array of `Shape`s.\r\n * @returns If input is a single `Shape`, return it unchanged. If the input is\r\n *   an `Array` containing exactly one instance of `Shape`, return the instance.\r\n *   Otherwise, throw a `ValueError`.\r\n * @throws ValueError: If input is an `Array` of `Shape`s, and its length is not\r\n *   1.\r\n */\nexport function getExactlyOneShape(shapes) {\n  if (Array.isArray(shapes) && Array.isArray(shapes[0])) {\n    if (shapes.length === 1) {\n      shapes = shapes;\n      return shapes[0];\n    } else {\n      throw new ValueError(`Expected exactly 1 Shape; got ${shapes.length}`);\n    }\n  } else {\n    return shapes;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}