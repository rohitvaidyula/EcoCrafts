{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n/**\r\n * IOHandlers related to files, such as browser-triggered file downloads,\r\n * user-selected files in browser.\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { basename, concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DEFAULT_FILE_NAME_PREFIX = 'model';\nconst DEFAULT_JSON_EXTENSION_NAME = '.json';\nconst DEFAULT_WEIGHT_DATA_EXTENSION_NAME = '.weights.bin';\nfunction defer(f) {\n  return new Promise(resolve => setTimeout(resolve)).then(f);\n}\nexport class BrowserDownloads {\n  constructor(fileNamePrefix) {\n    if (!env().getBool('IS_BROWSER')) {\n      // TODO(cais): Provide info on what IOHandlers are available under the\n      //   current environment.\n      throw new Error('browserDownloads() cannot proceed because the current environment ' + 'is not a browser.');\n    }\n    if (fileNamePrefix.startsWith(BrowserDownloads.URL_SCHEME)) {\n      fileNamePrefix = fileNamePrefix.slice(BrowserDownloads.URL_SCHEME.length);\n    }\n    if (fileNamePrefix == null || fileNamePrefix.length === 0) {\n      fileNamePrefix = DEFAULT_FILE_NAME_PREFIX;\n    }\n    this.modelTopologyFileName = fileNamePrefix + DEFAULT_JSON_EXTENSION_NAME;\n    this.weightDataFileName = fileNamePrefix + DEFAULT_WEIGHT_DATA_EXTENSION_NAME;\n  }\n  async save(modelArtifacts) {\n    if (typeof document === 'undefined') {\n      throw new Error('Browser downloads are not supported in ' + 'this environment since `document` is not present');\n    }\n    const weightsURL = window.URL.createObjectURL(new Blob([modelArtifacts.weightData], {\n      type: 'application/octet-stream'\n    }));\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserDownloads.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const weightsManifest = [{\n        paths: ['./' + this.weightDataFileName],\n        weights: modelArtifacts.weightSpecs\n      }];\n      const modelTopologyAndWeightManifest = {\n        modelTopology: modelArtifacts.modelTopology,\n        format: modelArtifacts.format,\n        generatedBy: modelArtifacts.generatedBy,\n        convertedBy: modelArtifacts.convertedBy,\n        weightsManifest\n      };\n      if (modelArtifacts.signature != null) {\n        modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n      }\n      if (modelArtifacts.userDefinedMetadata != null) {\n        modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n      }\n      if (modelArtifacts.modelInitializer != null) {\n        modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n      }\n      const modelTopologyAndWeightManifestURL = window.URL.createObjectURL(new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n        type: 'application/json'\n      }));\n      // If anchor elements are not provided, create them without attaching them\n      // to parents, so that the downloaded file names can be controlled.\n      const jsonAnchor = this.jsonAnchor == null ? document.createElement('a') : this.jsonAnchor;\n      jsonAnchor.download = this.modelTopologyFileName;\n      jsonAnchor.href = modelTopologyAndWeightManifestURL;\n      // Trigger downloads by evoking a click event on the download anchors.\n      // When multiple downloads are started synchronously, Firefox will only\n      // save the last one.\n      await defer(() => jsonAnchor.dispatchEvent(new MouseEvent('click')));\n      if (modelArtifacts.weightData != null) {\n        const weightDataAnchor = this.weightDataAnchor == null ? document.createElement('a') : this.weightDataAnchor;\n        weightDataAnchor.download = this.weightDataFileName;\n        weightDataAnchor.href = weightsURL;\n        await defer(() => weightDataAnchor.dispatchEvent(new MouseEvent('click')));\n      }\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts)\n      };\n    }\n  }\n}\nBrowserDownloads.URL_SCHEME = 'downloads://';\nclass BrowserFiles {\n  constructor(files) {\n    if (files == null || files.length < 1) {\n      throw new Error(`When calling browserFiles, at least 1 file is required, ` + `but received ${files}`);\n    }\n    this.files = files;\n  }\n  async load() {\n    const jsonFile = this.files[0];\n    const weightFiles = this.files.slice(1);\n    return new Promise((resolve, reject) => {\n      const jsonReader = new FileReader();\n      jsonReader.onload = event => {\n        // tslint:disable-next-line:no-any\n        const modelJSON = JSON.parse(event.target.result);\n        const modelTopology = modelJSON.modelTopology;\n        if (modelTopology == null) {\n          reject(new Error(`modelTopology field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        if (weightFiles.length === 0) {\n          resolve({\n            modelTopology\n          });\n        }\n        const weightsManifest = modelJSON.weightsManifest;\n        if (weightsManifest == null) {\n          reject(new Error(`weightManifest field is missing from file ${jsonFile.name}`));\n          return;\n        }\n        let pathToFile;\n        try {\n          pathToFile = this.checkManifestAndWeightFiles(weightsManifest, weightFiles);\n        } catch (err) {\n          reject(err);\n          return;\n        }\n        const weightSpecs = [];\n        const paths = [];\n        const perFileBuffers = [];\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            paths.push(path);\n            perFileBuffers.push(null);\n          });\n          weightSpecs.push(...weightsGroup.weights);\n        });\n        weightsManifest.forEach(weightsGroup => {\n          weightsGroup.paths.forEach(path => {\n            const weightFileReader = new FileReader();\n            weightFileReader.onload = event => {\n              // tslint:disable-next-line:no-any\n              const weightData = event.target.result;\n              const index = paths.indexOf(path);\n              perFileBuffers[index] = weightData;\n              if (perFileBuffers.indexOf(null) === -1) {\n                const result = {\n                  modelTopology,\n                  weightSpecs,\n                  weightData: concatenateArrayBuffers(perFileBuffers),\n                  format: modelJSON.format,\n                  generatedBy: modelJSON.generatedBy,\n                  convertedBy: modelJSON.convertedBy\n                };\n                if (modelJSON.signature != null) {\n                  result.signature = modelJSON.signature;\n                }\n                if (modelJSON.userDefinedMetadata != null) {\n                  result.userDefinedMetadata = modelJSON.userDefinedMetadata;\n                }\n                if (modelJSON.modelInitializer != null) {\n                  result.modelInitializer = modelJSON.modelInitializer;\n                }\n                resolve(result);\n              }\n            };\n            weightFileReader.onerror = error => reject(`Failed to weights data from file of path '${path}'.`);\n            weightFileReader.readAsArrayBuffer(pathToFile[path]);\n          });\n        });\n      };\n      jsonReader.onerror = error => reject(`Failed to read model topology and weights manifest JSON ` + `from file '${jsonFile.name}'. BrowserFiles supports loading ` + `Keras-style tf.Model artifacts only.`);\n      jsonReader.readAsText(jsonFile);\n    });\n  }\n  /**\r\n   * Check the compatibility between weights manifest and weight files.\r\n   */\n  checkManifestAndWeightFiles(manifest, files) {\n    const basenames = [];\n    const fileNames = files.map(file => basename(file.name));\n    const pathToFile = {};\n    for (const group of manifest) {\n      group.paths.forEach(path => {\n        const pathBasename = basename(path);\n        if (basenames.indexOf(pathBasename) !== -1) {\n          throw new Error(`Duplicate file basename found in weights manifest: ` + `'${pathBasename}'`);\n        }\n        basenames.push(pathBasename);\n        if (fileNames.indexOf(pathBasename) === -1) {\n          throw new Error(`Weight file with basename '${pathBasename}' is not provided.`);\n        } else {\n          pathToFile[path] = files[fileNames.indexOf(pathBasename)];\n        }\n      });\n    }\n    if (basenames.length !== files.length) {\n      throw new Error(`Mismatch in the number of files in weights manifest ` + `(${basenames.length}) and the number of weight files provided ` + `(${files.length}).`);\n    }\n    return pathToFile;\n  }\n}\nexport const browserDownloadsRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserDownloads.URL_SCHEME)) {\n      return browserDownloads(url.slice(BrowserDownloads.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(browserDownloadsRouter);\n/**\r\n * Creates an IOHandler that triggers file downloads from the browser.\r\n *\r\n * The returned `IOHandler` instance can be used as model exporting methods such\r\n * as `tf.Model.save` and supports only saving.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(tf.layers.dense(\r\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\r\n * const saveResult = await model.save('downloads://mymodel');\r\n * // This will trigger downloading of two files:\r\n * //   'mymodel.json' and 'mymodel.weights.bin'.\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param fileNamePrefix Prefix name of the files to be downloaded. For use with\r\n *   `tf.Model`, `fileNamePrefix` should follow either of the following two\r\n *   formats:\r\n *   1. `null` or `undefined`, in which case the default file\r\n *      names will be used:\r\n *      - 'model.json' for the JSON file containing the model topology and\r\n *        weights manifest.\r\n *      - 'model.weights.bin' for the binary file containing the binary weight\r\n *        values.\r\n *   2. A single string or an Array of a single string, as the file name prefix.\r\n *      For example, if `'foo'` is provided, the downloaded JSON\r\n *      file and binary weights file will be named 'foo.json' and\r\n *      'foo.weights.bin', respectively.\r\n * @param config Additional configuration for triggering downloads.\r\n * @returns An instance of `BrowserDownloads` `IOHandler`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nexport function browserDownloads(fileNamePrefix = 'model') {\n  return new BrowserDownloads(fileNamePrefix);\n}\n/**\r\n * Creates an IOHandler that loads model artifacts from user-selected files.\r\n *\r\n * This method can be used for loading from files such as user-selected files\r\n * in the browser.\r\n * When used in conjunction with `tf.loadLayersModel`, an instance of\r\n * `tf.LayersModel` (Keras-style) can be constructed from the loaded artifacts.\r\n *\r\n * ```js\r\n * // Note: This code snippet won't run properly without the actual file input\r\n * //   elements in the HTML DOM.\r\n *\r\n * // Suppose there are two HTML file input (`<input type=\"file\" ...>`)\r\n * // elements.\r\n * const uploadJSONInput = document.getElementById('upload-json');\r\n * const uploadWeightsInput = document.getElementById('upload-weights');\r\n * const model = await tf.loadLayersModel(tf.io.browserFiles(\r\n *     [uploadJSONInput.files[0], uploadWeightsInput.files[0]]));\r\n * ```\r\n *\r\n * @param files `File`s to load from. Currently, this function supports only\r\n *   loading from files that contain Keras-style models (i.e., `tf.Model`s), for\r\n *   which an `Array` of `File`s is expected (in that order):\r\n *   - A JSON file containing the model topology and weight manifest.\r\n *   - Optionally, One or more binary files containing the binary weights.\r\n *     These files must have names that match the paths in the `weightsManifest`\r\n *     contained by the aforementioned JSON file, or errors will be thrown\r\n *     during loading. These weights files have the same format as the ones\r\n *     generated by `tensorflowjs_converter` that comes with the `tensorflowjs`\r\n *     Python PIP package. If no weights files are provided, only the model\r\n *     topology will be loaded from the JSON file above.\r\n * @returns An instance of `Files` `IOHandler`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nexport function browserFiles(files) {\n  return new BrowserFiles(files);\n}","map":null,"metadata":{},"sourceType":"module"}