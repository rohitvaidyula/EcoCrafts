{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\nimport { CallbackConstructorRegistry } from './base_callbacks';\nimport { Input } from './engine/input_layer';\nimport { LayersModel } from './engine/training';\nimport { loadLayersModelInternal, Sequential } from './models';\n// TODO(cais): Add doc string to all the public static functions in this\n//   class; include exectuable JavaScript code snippets where applicable\n//   (b/74074458).\n// LayersModel and related factory methods.\n/**\r\n * A model is a data structure that consists of `Layers` and defines inputs\r\n * and outputs.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.model` is more generic, supporting an arbitrary graph (without\r\n * cycles) of layers. `tf.sequential` is less generic and supports only a linear\r\n * stack of layers.\r\n *\r\n * When creating a `tf.LayersModel`, specify its input(s) and output(s). Layers\r\n * are used to wire input(s) to output(s).\r\n *\r\n * For example, the following code snippet defines a model consisting of\r\n * two `dense` layers, with 10 and 4 units, respectively.\r\n *\r\n * ```js\r\n * // Define input, which has a size of 5 (not including batch dimension).\r\n * const input = tf.input({shape: [5]});\r\n *\r\n * // First dense layer uses relu activation.\r\n * const denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\r\n * // Second dense layer uses softmax activation.\r\n * const denseLayer2 = tf.layers.dense({units: 4, activation: 'softmax'});\r\n *\r\n * // Obtain the output symbolic tensor by applying the layers on the input.\r\n * const output = denseLayer2.apply(denseLayer1.apply(input));\r\n *\r\n * // Create the model based on the inputs.\r\n * const model = tf.model({inputs: input, outputs: output});\r\n *\r\n * // The model can be used for training, evaluation and prediction.\r\n * // For example, the following line runs prediction with the model on\r\n * // some fake data.\r\n * model.predict(tf.ones([2, 5])).print();\r\n * ```\r\n * See also:\r\n *   `tf.sequential`, `tf.loadLayersModel`.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\nexport function model(args) {\n  return new LayersModel(args);\n}\n/**\r\n * Creates a `tf.Sequential` model.  A sequential model is any model where the\r\n * outputs of one layer are the inputs to the next layer, i.e. the model\r\n * topology is a simple 'stack' of layers, with no branching or skipping.\r\n *\r\n * This means that the first layer passed to a `tf.Sequential` model should have\r\n * a defined input shape. What that means is that it should have received an\r\n * `inputShape` or `batchInputShape` argument, or for some type of layers\r\n * (recurrent, Dense...) an `inputDim` argument.\r\n *\r\n * The key difference between `tf.model` and `tf.sequential` is that\r\n * `tf.sequential` is less generic, supporting only a linear stack of layers.\r\n * `tf.model` is more generic and supports an arbitrary graph (without\r\n * cycles) of layers.\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have an input shape defined.\r\n * model.add(tf.layers.dense({units: 32, inputShape: [50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output, which equals\r\n * // `[null, 4]`. The 1st dimension is the undetermined batch dimension; the\r\n * // 2nd is the output size of the model's last layer.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * It is also possible to specify a batch size (with potentially undetermined\r\n * batch dimension, denoted by \"null\") for the first layer using the\r\n * `batchInputShape` key. The following example is equivalent to the above:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n *\r\n * // First layer must have a defined input shape\r\n * model.add(tf.layers.dense({units: 32, batchInputShape: [null, 50]}));\r\n * // Afterwards, TF.js does automatic shape inference.\r\n * model.add(tf.layers.dense({units: 4}));\r\n *\r\n * // Inspect the inferred shape of the model's output.\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * You can also use an `Array` of already-constructed `Layer`s to create\r\n * a `tf.Sequential` model:\r\n *\r\n * ```js\r\n * const model = tf.sequential({\r\n *   layers: [tf.layers.dense({units: 32, inputShape: [50]}),\r\n *            tf.layers.dense({units: 4})]\r\n * });\r\n * console.log(JSON.stringify(model.outputs[0].shape));\r\n * ```\r\n *\r\n * @doc {heading: 'Models', subheading: 'Creation'}\r\n */\nexport function sequential(config) {\n  return new Sequential(config);\n}\n/**\r\n * Load a model composed of Layer objects, including its topology and optionally\r\n * weights. See the Tutorial named \"How to import a Keras Model\" for usage\r\n * examples.\r\n *\r\n * This method is applicable to:\r\n *\r\n * 1. Models created with the `tf.layers.*`, `tf.sequential`, and\r\n * `tf.model` APIs of TensorFlow.js and later saved with the\r\n * `tf.LayersModel.save` method.\r\n * 2. Models converted from Keras or TensorFlow tf.keras using the\r\n * [tensorflowjs_converter](https://github.com/tensorflow/tfjs/tree/master/tfjs-converter).\r\n *\r\n * This mode is *not* applicable to TensorFlow `SavedModel`s or their converted\r\n * forms. For those models, use `tf.loadGraphModel`.\r\n *\r\n * Example 1. Load a model from an HTTP server.\r\n *\r\n * ```js\r\n * const model = await tf.loadLayersModel(\r\n *     'https://storage.googleapis.com/tfjs-models/tfjs/iris_v1/model.json');\r\n * model.summary();\r\n * ```\r\n *\r\n * Example 2: Save `model`'s topology and weights to browser [local\r\n * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('localstorage://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 3. Saving `model`'s topology and weights to browser\r\n * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n * then load it back.\r\n *\r\n * ```js\r\n * const model = tf.sequential(\r\n *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n * console.log('Prediction from original model:');\r\n * model.predict(tf.ones([1, 3])).print();\r\n *\r\n * const saveResults = await model.save('indexeddb://my-model-1');\r\n *\r\n * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n * console.log('Prediction from loaded model:');\r\n * loadedModel.predict(tf.ones([1, 3])).print();\r\n * ```\r\n *\r\n * Example 4. Load a model from user-selected files from HTML\r\n * [file input\r\n * elements](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file).\r\n *\r\n * ```js\r\n * // Note: this code snippet will not work without the HTML elements in the\r\n * //   page\r\n * const jsonUpload = document.getElementById('json-upload');\r\n * const weightsUpload = document.getElementById('weights-upload');\r\n *\r\n * const model = await tf.loadLayersModel(\r\n *     tf.io.browserFiles([jsonUpload.files[0], weightsUpload.files[0]]));\r\n * ```\r\n *\r\n * @param pathOrIOHandler Can be either of the two formats\r\n *   1. A string path to the `ModelAndWeightsConfig` JSON describing\r\n *      the model in the canonical TensorFlow.js format. For file://\r\n *      (tfjs-node-only), http:// and https:// schemas, the path can be\r\n *      either absolute or relative.\r\n *   2. An `tf.io.IOHandler` object that loads model artifacts with its `load`\r\n *      method.\r\n * @param options Optional configuration arguments for the model loading,\r\n *   including:\r\n *   - `strict`: Require that the provided weights exactly match those required\r\n *     by the layers.  Default true.  Passing false means that both extra\r\n *     weights and missing weights will be silently ignored.\r\n *   - `onProgress`: A function of the signature `(fraction: number) => void',\r\n *     that can be used as the progress callback for the model loading.\r\n * @returns A `Promise` of `tf.LayersModel`, with the topology and weights\r\n *     loaded.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Loading'}\r\n */\nexport function loadLayersModel(pathOrIOHandler, options) {\n  if (options == null) {\n    options = {};\n  }\n  return loadLayersModelInternal(pathOrIOHandler, options);\n}\n/**\r\n * Used to instantiate an input to a model as a `tf.SymbolicTensor`.\r\n *\r\n * Users should call the `input` factory function for\r\n * consistency with other generator functions.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * // Defines a simple logistic regression model with 32 dimensional input\r\n * // and 3 dimensional output.\r\n * const x = tf.input({shape: [32]});\r\n * const y = tf.layers.dense({units: 3, activation: 'softmax'}).apply(x);\r\n * const model = tf.model({inputs: x, outputs: y});\r\n * model.predict(tf.ones([2, 32])).print();\r\n * ```\r\n *\r\n * Note: `input` is only necessary when using `model`. When using\r\n * `sequential`, specify `inputShape` for the first layer or use `inputLayer`\r\n * as the first layer.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Inputs'}\r\n */\nexport function input(config) {\n  return Input(config);\n}\nexport function registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n  CallbackConstructorRegistry.registerCallbackConstructor(verbosityLevel, callbackConstructor);\n}","map":null,"metadata":{},"sourceType":"module"}