{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\r\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\r\n * at locations before converting to an immutable `tf.Tensor`.\r\n *\r\n * See `tf.buffer` for creating a tensor buffer.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\nexport class TensorBuffer {\n  constructor(shape, dtype, values) {\n    this.dtype = dtype;\n    this.shape = shape.slice();\n    this.size = util.sizeFromShape(shape);\n    if (values != null) {\n      const n = values.length;\n      util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` + `inferred by the shape '${this.size}'.`);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` + `a TensorBuffer for the real and imaginary parts separately and ` + `call tf.complex(real, imag).`);\n    }\n    this.values = values || util.getArrayFromDType(dtype, this.size);\n    this.strides = computeStrides(shape);\n  }\n  /**\r\n   * Sets a value in the buffer at a given location.\r\n   *\r\n   * @param value The value to set.\r\n   * @param locs  The location indices.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n  set(value, ...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` + `match the rank (${this.rank})`);\n    const index = this.locToIndex(locs);\n    this.values[index] = value;\n  }\n  /**\r\n   * Returns the value in the buffer at the provided location.\r\n   *\r\n   * @param locs The location indices.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n  get(...locs) {\n    if (locs.length === 0) {\n      locs = [0];\n    }\n    let i = 0;\n    for (const loc of locs) {\n      if (loc < 0 || loc >= this.shape[i]) {\n        const msg = `Requested out of range element at ${locs}. ` + `  Buffer shape=${this.shape}`;\n        throw new Error(msg);\n      }\n      i++;\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return this.values[index];\n  }\n  locToIndex(locs) {\n    if (this.rank === 0) {\n      return 0;\n    } else if (this.rank === 1) {\n      return locs[0];\n    }\n    let index = locs[locs.length - 1];\n    for (let i = 0; i < locs.length - 1; ++i) {\n      index += this.strides[i] * locs[i];\n    }\n    return index;\n  }\n  indexToLoc(index) {\n    if (this.rank === 0) {\n      return [];\n    } else if (this.rank === 1) {\n      return [index];\n    }\n    const locs = new Array(this.shape.length);\n    for (let i = 0; i < locs.length - 1; ++i) {\n      locs[i] = Math.floor(index / this.strides[i]);\n      index -= locs[i] * this.strides[i];\n    }\n    locs[locs.length - 1] = index;\n    return locs;\n  }\n  get rank() {\n    return this.shape.length;\n  }\n  /**\r\n   * Creates an immutable `tf.Tensor` object from the buffer.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n   */\n  toTensor() {\n    return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n  }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\r\n * An external consumer can register itself as the tensor tracker. This way\r\n * the Tensor class can notify the tracker for every tensor created and\r\n * disposed.\r\n */\nexport function setTensorTracker(fn) {\n  trackerFn = fn;\n}\n/**\r\n * An external consumer can register itself as the op handler. This way the\r\n * Tensor class can have chaining methods that call into ops via the op\r\n * handler.\r\n */\nexport function setOpHandler(handler) {\n  opHandler = handler;\n}\n/**\r\n * Sets the deprecation warning function to be used by this file. This way the\r\n * Tensor class can be a leaf but still use the environment.\r\n */\nexport function setDeprecationWarningFn(fn) {\n  deprecationWarningFn = fn;\n}\n/**\r\n * A `tf.Tensor` object represents an immutable, multidimensional array of\r\n * numbers that has a shape and a data type.\r\n *\r\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\nexport class Tensor {\n  constructor(shape, dtype, dataId, id) {\n    /** Whether this tensor has been globally kept. */\n    this.kept = false;\n    this.isDisposedInternal = false;\n    this.shape = shape.slice();\n    this.dtype = dtype || 'float32';\n    this.size = util.sizeFromShape(shape);\n    this.strides = computeStrides(shape);\n    this.dataId = dataId;\n    this.id = id;\n    this.rankType = this.rank < 5 ? this.rank.toString() : 'higher';\n  }\n  get rank() {\n    return this.shape.length;\n  }\n  /**\r\n   * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  async buffer() {\n    const vals = await this.data();\n    return opHandler.buffer(this.shape, this.dtype, vals);\n  }\n  /**\r\n   * Returns a `tf.TensorBuffer` that holds the underlying data.\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  bufferSync() {\n    return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n  }\n  /**\r\n   * Returns the tensor data as a nested array. The transfer of data is done\r\n   * asynchronously.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  async array() {\n    const vals = await this.data();\n    return toNestedArray(this.shape, vals);\n  }\n  /**\r\n   * Returns the tensor data as a nested array. The transfer of data is done\r\n   * synchronously.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  arraySync() {\n    return toNestedArray(this.shape, this.dataSync());\n  }\n  /**\r\n   * Asynchronously downloads the values from the `tf.Tensor`. Returns a\r\n   * promise of `TypedArray` that resolves when the computation has finished.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  async data() {\n    this.throwIfDisposed();\n    const data = trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      const bytes = await data;\n      try {\n        return bytes.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data;\n  }\n  /**\r\n   * Synchronously downloads the values from the `tf.Tensor`. This blocks the\r\n   * UI thread until the values are ready, which can cause performance issues.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  dataSync() {\n    this.throwIfDisposed();\n    const data = trackerFn().readSync(this.dataId);\n    if (this.dtype === 'string') {\n      try {\n        return data.map(b => util.decodeString(b));\n      } catch (_a) {\n        throw new Error('Failed to decode the string bytes into utf-8. ' + 'To get the original bytes, call tensor.bytes().');\n      }\n    }\n    return data;\n  }\n  /** Returns the underlying bytes of the tensor's data. */\n  async bytes() {\n    this.throwIfDisposed();\n    const data = await trackerFn().read(this.dataId);\n    if (this.dtype === 'string') {\n      return data;\n    } else {\n      return new Uint8Array(data.buffer);\n    }\n  }\n  /**\r\n   * Disposes `tf.Tensor` from memory.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  dispose() {\n    if (this.isDisposed) {\n      return;\n    }\n    trackerFn().disposeTensor(this);\n    this.isDisposedInternal = true;\n  }\n  get isDisposed() {\n    return this.isDisposedInternal;\n  }\n  throwIfDisposed() {\n    if (this.isDisposed) {\n      throw new Error(`Tensor is disposed.`);\n    }\n  }\n  /**\r\n   * Prints the `tf.Tensor`. See `tf.print` for details.\r\n   *\r\n   * @param verbose Whether to print verbose information about the tensor,\r\n   *    including dtype and size.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  print(verbose = false) {\n    return opHandler.print(this, verbose);\n  }\n  /**\r\n   * Returns a copy of the tensor. See `tf.clone` for details.\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  clone() {\n    this.throwIfDisposed();\n    return opHandler.clone(this);\n  }\n  /**\r\n   * Returns a human-readable description of the tensor. Useful for logging.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  toString(verbose = false) {\n    const vals = this.dataSync();\n    return tensorToString(vals, this.shape, this.dtype, verbose);\n  }\n  cast(dtype) {\n    this.throwIfDisposed();\n    return opHandler.cast(this, dtype);\n  }\n  variable(trainable = true, name, dtype) {\n    this.throwIfDisposed();\n    return trackerFn().makeVariable(this, trainable, name, dtype);\n  }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n  value: instance => {\n    // Implementation note: we should use properties of the object that will be\n    // defined before the constructor body has finished executing (methods).\n    // This is because when this code is transpiled by babel, babel will call\n    // classCallCheck before the constructor body is run.\n    // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n    return !!instance && instance.data != null && instance.dataSync != null && instance.throwIfDisposed != null;\n  }\n});\n/**\r\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n */\nexport class Variable extends Tensor {\n  constructor(initialValue, trainable, name, tensorId) {\n    super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n    this.trainable = trainable;\n    this.name = name;\n  }\n  /**\r\n   * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\r\n   * the same shape and dtype as the old `tf.Tensor`.\r\n   *\r\n   * @param newValue New tensor to be assigned to this variable.\r\n   *\r\n   * @doc {heading: 'Tensors', subheading: 'Classes'}\r\n   */\n  assign(newValue) {\n    if (newValue.dtype !== this.dtype) {\n      throw new Error(`dtype of the new value (${newValue.dtype}) and ` + `previous value (${this.dtype}) must match`);\n    }\n    if (!util.arraysEqual(newValue.shape, this.shape)) {\n      throw new Error(`shape of the new value (${newValue.shape}) and ` + `previous value (${this.shape}) must match`);\n    }\n    trackerFn().disposeTensor(this);\n    this.dataId = newValue.dataId;\n    trackerFn().incRef(this, null /* backend */);\n  }\n\n  dispose() {\n    trackerFn().disposeVariable(this);\n    this.isDisposedInternal = true;\n  }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n  value: instance => {\n    return instance instanceof Tensor && instance.assign != null && instance.assign instanceof Function;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}