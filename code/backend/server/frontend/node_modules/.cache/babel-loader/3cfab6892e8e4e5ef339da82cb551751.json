{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { All } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes the logical and of elements across dimensions of a `tf.Tensor`.\r\n *\r\n * Reduces the input along the dimensions given in `axes`. Unless `keepDims`\r\n * is true, the rank of the `tf.Tensor` is reduced by 1 for each entry in\r\n * `axes`. If `keepDims` is true, the reduced dimensions are retained with\r\n * length 1. If `axes` has no entries, all dimensions are reduced, and an\r\n * `tf.Tensor` with a single element is returned.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 1, 1], 'bool');\r\n *\r\n * x.all().print();  // or tf.all(x)\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 1, 0, 0], [2, 2], 'bool');\r\n *\r\n * const axis = 1;\r\n * x.all(axis).print();  // or tf.all(x, axis)\r\n * ```\r\n *\r\n * @param x The input tensor. Must be of dtype bool.\r\n * @param axis The dimension(s) to reduce. By default it reduces\r\n *     all dimensions.\r\n * @param keepDims If true, retains reduced dimensions with size 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Reduction'}\r\n */\nfunction all_(x, axis = null, keepDims = false) {\n  const $x = convertToTensor(x, 'x', 'all', 'bool');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    keepDims\n  };\n  return ENGINE.runKernel(All, inputs, attrs);\n}\nexport const all = op({\n  all_\n});","map":null,"metadata":{},"sourceType":"module"}