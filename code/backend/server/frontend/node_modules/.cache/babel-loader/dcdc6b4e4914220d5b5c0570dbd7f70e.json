{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { div } from './div';\nimport { equal } from './equal';\nimport { op } from './operation';\nimport { where } from './where';\nimport { zerosLike } from './zeros_like';\n/**\r\n * Divides two `tf.Tensor`s element-wise, A / B. Supports broadcasting. Return 0\r\n * if denominator is 0.\r\n *\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 4, 9, 16]);\r\n * const b = tf.tensor1d([1, 2, 3, 4]);\r\n * const c = tf.tensor1d([0, 0, 0, 0]);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast div a with b.\r\n * const a = tf.tensor1d([2, 4, 6, 8]);\r\n * const b = tf.scalar(2);\r\n * const c = tf.scalar(0);\r\n *\r\n * a.divNoNan(b).print();  // or tf.divNoNan(a, b)\r\n * a.divNoNan(c).print();  // or tf.divNoNan(a, c)\r\n * ```\r\n *\r\n * @param a The first tensor as the numerator.\r\n * @param b The second tensor as the denominator. Must have the same dtype as\r\n * `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\nfunction divNoNan_(a, b) {\n  // TODO: Make this into its own kernel.\n  let $a = convertToTensor(a, 'a', 'div');\n  let $b = convertToTensor(b, 'b', 'div');\n  [$a, $b] = makeTypesMatch($a, $b);\n  const divResult = div($a, $b);\n  const zeros = zerosLike(divResult);\n  const bEqualsZero = equal($b, zeros);\n  return where(bEqualsZero, zeros, divResult);\n}\nexport const divNoNan = op({\n  divNoNan_\n});","map":null,"metadata":{},"sourceType":"module"}