{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n  const x = value;\n  const xRank = x.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n  const toDispose = [];\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size\n      }\n    });\n    const reshaped = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    res[i] = reshaped;\n    toDispose.push(sliced);\n  }\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack\n};","map":null,"metadata":{},"sourceType":"module"}