{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Reverse } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Reverses a `tf.Tensor` along a specified axis.\r\n *\r\n * Also available are stricter rank-specific methods that assert that `x` is\r\n * of the given rank:\r\n *   - `tf.reverse1d`\r\n *   - `tf.reverse2d`\r\n *   - `tf.reverse3d`\r\n *   - `tf.reverse4d`\r\n *\r\n * Except `tf.reverse1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.reverse().print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * const axis = 1;\r\n * x.reverse(axis).print();\r\n * ```\r\n * @param x The input tensor to be reversed.\r\n * @param axis The set of dimensions to reverse. Must be in the\r\n *     range [-rank(x), rank(x)). Defaults to all axes.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction reverse_(x, axis) {\n  const $x = convertToTensor(x, 'x', 'reverse');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    dims: axis\n  };\n  return ENGINE.runKernel(Reverse, inputs, attrs);\n}\nexport const reverse = op({\n  reverse_\n});","map":null,"metadata":{},"sourceType":"module"}