{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Conv3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { eitherStridesOrDilationsAreOne } from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes a 3D convolution over the input x.\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4, of shape\r\n *     `[batch, depth, height, width, channels]`. If rank 4,\r\n * batch of 1 is assumed.\r\n * @param filter The filter, rank 5, of shape\r\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\r\n *      inChannels must match between input and filter.\r\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\r\n * strideWidth]`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1x1.\r\n *   - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\r\n *     dilationWidth]` in which we sample input values across the height\r\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\r\n *     If `dilations` is a single number, then\r\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\r\n *     than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\nfunction conv3d_(x, filter, strides, pad, dataFormat = 'NDHWC', dilations = [1, 1, 1]) {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);\n  util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);\n  const inputs = {\n    x: x5D,\n    filter: $filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(Conv3D, inputs, attrs);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nexport const conv3d = op({\n  conv3d_\n});","map":null,"metadata":{},"sourceType":"module"}