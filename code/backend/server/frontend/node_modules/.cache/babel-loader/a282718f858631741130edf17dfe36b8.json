{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Complex } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Converts two real numbers to a complex number.\r\n *\r\n * Given a tensor `real` representing the real part of a complex number, and a\r\n * tensor `imag` representing the imaginary part of a complex number, this\r\n * operation returns complex numbers elementwise of the form [r0, i0, r1, i1],\r\n * where r represents the real part and i represents the imag part.\r\n *\r\n * The input tensors real and imag must have the same shape.\r\n *\r\n * ```js\r\n * const real = tf.tensor1d([2.25, 3.25]);\r\n * const imag = tf.tensor1d([4.75, 5.75]);\r\n * const complex = tf.complex(real, imag);\r\n *\r\n * complex.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\nfunction complex_(real, imag) {\n  const $real = convertToTensor(real, 'real', 'complex');\n  const $imag = convertToTensor(imag, 'imag', 'complex');\n  util.assertShapesMatch($real.shape, $imag.shape, `real and imag shapes, ${$real.shape} and ${$imag.shape}, ` + `must match in call to tf.complex().`);\n  const inputs = {\n    real: $real,\n    imag: $imag\n  };\n  return ENGINE.runKernel(Complex, inputs);\n}\nexport const complex = op({\n  complex_\n});","map":null,"metadata":{},"sourceType":"module"}