{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n  if (a.dtype === b.dtype) {\n    return [a, b];\n  }\n  const dtype = upcastType(a.dtype, b.dtype);\n  return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n  assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` + ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n  return tensorList.some(x => x.id === tensor.id);\n}\n/**\r\n * Extracts any `Tensor`s found within the provided object.\r\n *\r\n * @param container an object that may be a `Tensor` or may directly contain\r\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\r\n *   is safe to pass any object here, except that `Promise`s are not\r\n *   supported.\r\n * @returns An array of `Tensors` found within the passed object. If the\r\n *   argument is simply a `Tensor', a list containing that `Tensor` is\r\n *   returned. If the object is not a `Tensor` or does not\r\n *   contain `Tensors`, an empty list is returned.\r\n */\nexport function getTensorsInContainer(result) {\n  const list = [];\n  const seen = new Set();\n  walkTensorContainer(result, list, seen);\n  return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n  if (container == null) {\n    return;\n  }\n  if (container instanceof Tensor) {\n    list.push(container);\n    return;\n  }\n  if (!isIterable(container)) {\n    return;\n  }\n  // Iteration over keys works also for arrays.\n  const iterable = container;\n  for (const k in iterable) {\n    const val = iterable[k];\n    if (!seen.has(val)) {\n      seen.add(val);\n      walkTensorContainer(val, list, seen);\n    }\n  }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n  return Array.isArray(obj) || typeof obj === 'object';\n}","map":null,"metadata":{},"sourceType":"module"}