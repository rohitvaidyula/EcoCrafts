{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\r\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\r\n * gradient of `f(x)` with respect to `x`.\r\n *\r\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\r\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\r\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\r\n *\r\n * ```js\r\n * // f(x) = x ^ 2\r\n * const f = x => x.square();\r\n * // f'(x) = 2x\r\n * const g = tf.grad(f);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * g(x).print();\r\n * ```\r\n *\r\n * ```js\r\n * // f(x) = x ^ 3\r\n * const f = x => x.pow(tf.scalar(3, 'int32'));\r\n * // f'(x) = 3x ^ 2\r\n * const g = tf.grad(f);\r\n * // f''(x) = 6x\r\n * const gg = tf.grad(g);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * gg(x).print();\r\n * ```\r\n *\r\n * @param f The function f(x), to compute gradient for.\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction grad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x, dy) => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n/**\r\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\r\n * which gives an array of gradients of `f()` with respect to each input\r\n * [`x1`,`x2`,...].\r\n *\r\n * If `dy` is passed when calling `g()`, the gradient of\r\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\r\n * The provided `f` must take one or more tensors and return a single tensor\r\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\r\n *\r\n * ```js\r\n * // f(a, b) = a * b\r\n * const f = (a, b) => a.mul(b);\r\n * // df / da = b, df / db = a\r\n * const g = tf.grads(f);\r\n *\r\n * const a = tf.tensor1d([2, 3]);\r\n * const b = tf.tensor1d([-2, -3]);\r\n * const [da, db] = g([a, b]);\r\n * console.log('da');\r\n * da.print();\r\n * console.log('db');\r\n * db.print();\r\n * ```\r\n *\r\n * @param f The function `f(x1, x2,...)` to compute gradients for.\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction grads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' + 'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n/**\r\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\r\n * returns a metric you want to show.\r\n *\r\n * The result is a rich object with the following properties:\r\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\r\n * - value: The value returned by `f(x)`.\r\n *\r\n * ```js\r\n * // f(x) = x ^ 2\r\n * const f = x => x.square();\r\n * // f'(x) = 2x\r\n * const g = tf.valueAndGrad(f);\r\n *\r\n * const x = tf.tensor1d([2, 3]);\r\n * const {value, grad} = g(x);\r\n *\r\n * console.log('value');\r\n * value.print();\r\n * console.log('grad');\r\n * grad.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction valueAndGrad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x, dy) => {\n    util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {\n      grads,\n      value\n    } = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {\n      grad: grads[0],\n      value\n    };\n  };\n}\n/**\r\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\r\n * returns a metric you want to show.\r\n *\r\n * The result is a rich object with the following properties:\r\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\r\n * - value: The value returned by `f(x)`.\r\n *\r\n * ```js\r\n * // f(a, b) = a * b\r\n * const f = (a, b) => a.mul(b);\r\n * // df/da = b, df/db = a\r\n * const g = tf.valueAndGrads(f);\r\n *\r\n * const a = tf.tensor1d([2, 3]);\r\n * const b = tf.tensor1d([-2, -3]);\r\n * const {value, grads} = g([a, b]);\r\n *\r\n * const [da, db] = grads;\r\n *\r\n * console.log('value');\r\n * value.print();\r\n *\r\n * console.log('da');\r\n * da.print();\r\n * console.log('db');\r\n * db.print();\r\n * ```\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction valueAndGrads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' + 'tensors');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n/**\r\n * Computes and returns the gradient of f(x) with respect to the list of\r\n * trainable variables provided by `varList`. If no list is provided, it\r\n * defaults to all trainable variables.\r\n *\r\n * ```js\r\n * const a = tf.variable(tf.tensor1d([3, 4]));\r\n * const b = tf.variable(tf.tensor1d([5, 6]));\r\n * const x = tf.tensor1d([1, 2]);\r\n *\r\n * // f(a, b) = a * x ^ 2 + b * x\r\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\r\n * // df/da = x ^ 2, df/db = x\r\n * const {value, grads} = tf.variableGrads(f);\r\n *\r\n * Object.keys(grads).forEach(varName => grads[varName].print());\r\n * ```\r\n *\r\n * @param f The function to execute. f() should return a scalar.\r\n * @param varList The list of variables to compute the gradients with respect\r\n *     to. Defaults to all trainable variables.\r\n * @returns An object with the following keys and values:\r\n *   - `value`: The value of the function `f`.\r\n *   - `grads`: A map from the names of the variables to the gradients.\r\n *     If the `varList` argument is provided explicitly and contains a subset of\r\n *     non-trainable variables, this map in the return value will contain keys\r\n *     that map the names of the non-trainable variables to `null`.\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction variableGrads(f, varList) {\n  util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(varList == null || Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n  const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);\n  const allowNoGradients = true;\n  const {\n    value,\n    grads\n  } = ENGINE.gradients(f, varList, null, allowNoGradients);\n  util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' + 'the loss function y=f(x). Please make sure the operations that ' + 'use variables are inside the function f passed to minimize().');\n  util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);\n  const namedGrads = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {\n    value,\n    grads: namedGrads\n  };\n}\n/**\r\n * Overrides the gradient computation of a function `f`.\r\n *\r\n * Takes a function\r\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\r\n * and returns another function `g(...inputs)` which takes the same inputs as\r\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\r\n * with respect to each input of `f` are computed using `f().gradFunc`.\r\n *\r\n * The `save` function passsed to `f` should be used for saving tensors needed\r\n * in the gradient. And the `saved` passed to the `gradFunc` is a\r\n * `NamedTensorMap`, which contains those saved tensor.\r\n *\r\n * ```js\r\n * const customOp = tf.customGrad((x, save) => {\r\n *   // Save x to make sure it's available later for the gradient.\r\n *   save([x]);\r\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\r\n *   return {\r\n *     value: x.square(),\r\n *     // Note `saved.x` which points to the `x` we saved earlier.\r\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\r\n *   };\r\n * });\r\n *\r\n * const x = tf.tensor1d([-1, -2, 3]);\r\n * const dx = tf.grad(x => customOp(x));\r\n *\r\n * console.log(`f(x):`);\r\n * customOp(x).print();\r\n * console.log(`f'(x):`);\r\n * dx(x).print();\r\n * ```\r\n *\r\n * @param f The function to evaluate in forward mode, which should return\r\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\r\n *     returns the custom gradients of `f` with respect to its inputs.\r\n *\r\n * @doc {heading: 'Training', subheading: 'Gradients'}\r\n */\nfunction customGrad(f) {\n  return ENGINE.customGrad(f);\n}\nfunction checkGrads(grads) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads };","map":null,"metadata":{},"sourceType":"module"}