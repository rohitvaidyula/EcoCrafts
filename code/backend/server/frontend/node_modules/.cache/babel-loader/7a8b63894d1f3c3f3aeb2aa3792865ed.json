{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { concat } from '../concat';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { enclosingPowerOfTwo } from '../signal_ops_util';\nimport { slice } from '../slice';\nimport { rfft } from '../spectral/rfft';\nimport { frame } from './frame';\nimport { hannWindow } from './hann_window';\n/**\r\n * Computes the Short-time Fourier Transform of signals\r\n * See: https://en.wikipedia.org/wiki/Short-time_Fourier_transform\r\n *\r\n * ```js\r\n * const input = tf.tensor1d([1, 1, 1, 1, 1])\r\n * tf.signal.stft(input, 3, 1).print();\r\n * ```\r\n * @param signal 1-dimensional real value tensor.\r\n * @param frameLength The window length of samples.\r\n * @param frameStep The number of samples to step.\r\n * @param fftLength The size of the FFT to apply.\r\n * @param windowFn A callable that takes a window length and returns 1-d tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\r\n */\nfunction stft_(signal, frameLength, frameStep, fftLength, windowFn = hannWindow) {\n  if (fftLength == null) {\n    fftLength = enclosingPowerOfTwo(frameLength);\n  }\n  const framedSignal = frame(signal, frameLength, frameStep);\n  const windowedSignal = mul(framedSignal, windowFn(frameLength));\n  const output = [];\n  for (let i = 0; i < framedSignal.shape[0]; i++) {\n    output.push(rfft(slice(windowedSignal, [i, 0], [1, frameLength]), fftLength));\n  }\n  return concat(output);\n}\nexport const stft = op({\n  stft_\n});","map":null,"metadata":{},"sourceType":"module"}