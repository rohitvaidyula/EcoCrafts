{"ast":null,"code":"/**\r\n * Contains global resources of a model.\r\n */\nexport class ResourceManager {\n  constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n    this.hashTableNameToHandle = hashTableNameToHandle;\n    this.hashTableMap = hashTableMap;\n  }\n  /**\r\n   * Register a `HashTable` in the resource manager.\r\n   *\r\n   * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\r\n   * where id is the table handle tensor's id.\r\n   *\r\n   * @param name Op node name that creates the `HashTable`.\r\n   * @param hashTable The `HashTable` to be added to resource manager.\r\n   */\n  addHashTable(name, hashTable) {\n    this.hashTableNameToHandle[name] = hashTable.handle;\n    this.hashTableMap[hashTable.id] = hashTable;\n  }\n  /**\r\n   * Get the table handle by node name.\r\n   * @param name Op node name that creates the `HashTable`. This name is also\r\n   *     used in the inputs list of lookup and import `HashTable` ops.\r\n   */\n  getHashTableHandleByName(name) {\n    return this.hashTableNameToHandle[name];\n  }\n  /**\r\n   * Get the actual `HashTable` by its handle tensor's id.\r\n   * @param id The id of the handle tensor.\r\n   */\n  getHashTableById(id) {\n    return this.hashTableMap[id];\n  }\n  /**\r\n   * Dispose `ResourceManager`, including its hashTables and tensors in them.\r\n   */\n  dispose() {\n    for (const key in this.hashTableMap) {\n      this.hashTableMap[key].clearAndClose();\n      delete this.hashTableMap[key];\n    }\n    for (const name in this.hashTableNameToHandle) {\n      this.hashTableNameToHandle[name].dispose();\n      delete this.hashTableNameToHandle[name];\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}