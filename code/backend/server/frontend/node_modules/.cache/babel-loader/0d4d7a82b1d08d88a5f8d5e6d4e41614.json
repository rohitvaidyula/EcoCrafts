{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nexport class IORouterRegistry {\n  constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n  static getInstance() {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n  /**\r\n   * Register a save-handler router.\r\n   *\r\n   * @param saveRouter A function that maps a URL-like string onto an instance\r\n   * of `IOHandler` with the `save` method defined or `null`.\r\n   */\n  static registerSaveRouter(saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n  /**\r\n   * Register a load-handler router.\r\n   *\r\n   * @param loadRouter A function that maps a URL-like string onto an instance\r\n   * of `IOHandler` with the `load` method defined or `null`.\r\n   */\n  static registerLoadRouter(loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n  /**\r\n   * Look up IOHandler for saving, given a URL-like string.\r\n   *\r\n   * @param url\r\n   * @returns If only one match is found, an instance of IOHandler with the\r\n   * `save` method defined. If no match is found, `null`.\r\n   * @throws Error, if more than one match is found.\r\n   */\n  static getSaveHandlers(url) {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n  /**\r\n   * Look up IOHandler for loading, given a URL-like string.\r\n   *\r\n   * @param url\r\n   * @param loadOptions Optional, custom load options.\r\n   * @returns All valid handlers for `url`, given the currently registered\r\n   *   handler routers.\r\n   */\n  static getLoadHandlers(url, loadOptions) {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n  static getHandlers(url, handlerType, loadOptions) {\n    const validHandlers = [];\n    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\nexport const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);","map":null,"metadata":{},"sourceType":"module"}