{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport { conv2DBackpropInput } from './conv2d_backprop_input';\nimport { op } from './operation';\n/**\r\n * Computes the transposed 2D convolution of an image, also known as a\r\n * deconvolution.\r\n *\r\n * @param x The input image, of rank 4 or rank 3, of shape\r\n *   `[batch, height, width, inDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param filter The filter, rank 4, of shape\r\n *     `[filterHeight, filterWidth, outDepth, inDepth]`.\r\n *     `inDepth` must match `inDepth` in `x`.\r\n * @param outputShape Output shape, of rank 4 or rank 3:\r\n *     `[batch, height, width, outDepth]`. If rank 3, batch of 1 is assumed.\r\n * @param strides The strides of the original convolution:\r\n *     `[strideHeight, strideWidth]`.\r\n * @param pad  The type of padding algorithm used in the non-transpose version\r\n *    of the op.\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\r\n *     provided, it will default to truncate.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\nfunction conv2dTranspose_(x, filter, outputShape, strides, pad, dimRoundingMode) {\n  const $x = convertToTensor(x, 'x', 'conv2dTranspose');\n  const $filter = convertToTensor(filter, 'filter', 'conv2dTranspose');\n  return conv2DBackpropInput(outputShape, $x, $filter, strides, pad, 'NHWC', dimRoundingMode);\n}\nexport const conv2dTranspose = op({\n  conv2dTranspose_\n});","map":null,"metadata":{},"sourceType":"module"}