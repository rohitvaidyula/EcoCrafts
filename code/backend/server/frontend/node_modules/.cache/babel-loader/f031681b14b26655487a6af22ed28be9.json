{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { mul } from './mul';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { softplus } from './softplus';\n/**\r\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\r\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([0, 1, -1, .7]);\r\n *\r\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\r\n * ```\r\n * @param x The input tensor.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\nfunction logSigmoid_(x) {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n  // Use a custom gradient to maintain previous implementation.\n  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n  // directly\n  const customOp = customGrad(x => {\n    // TODO(yassogba) we can remove the chained softplus call here only\n    // after backends have modualrized softplus at which point we can call\n    // engine runKernel(..., Sotfplus, ...) directly.\n    const value = neg(softplus(neg(x)));\n    const gradFunc = dy => {\n      const derX = mul(dy, sigmoid(neg(x)));\n      return derX;\n    };\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp($x);\n}\nexport const logSigmoid = op({\n  logSigmoid_\n});","map":null,"metadata":{},"sourceType":"module"}