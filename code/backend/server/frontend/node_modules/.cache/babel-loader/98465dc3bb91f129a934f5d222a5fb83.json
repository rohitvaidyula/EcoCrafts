{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { BatchToSpaceND } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * This operation reshapes the \"batch\" dimension 0 into `M + 1` dimensions of\r\n * shape `blockShape + [batch]`, interleaves these blocks back into the grid\r\n * defined by the spatial dimensions `[1, ..., M]`, to obtain a result with\r\n * the same rank as the input. The spatial dimensions of this intermediate\r\n * result are then optionally cropped according to `crops` to produce the\r\n * output. This is the reverse of `tf.spaceToBatchND`. See below for a precise\r\n * description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [4, 1, 1, 1]);\r\n * const blockShape = [2, 2];\r\n * const crops = [[0, 0], [0, 0]];\r\n *\r\n * x.batchToSpaceND(blockShape, crops).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param crops A 2-D array.  Must have shape `[M, 2]`, all values must be >= 0.\r\n * `crops[i] = [cropStart, cropEnd]` specifies the amount to crop from input\r\n * dimension `i + 1`, which corresponds to spatial dimension `i`. It is required\r\n * that `cropStart[i] + cropEnd[i] <= blockShape[i] * inputShape[i + 1]`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Reshape `x` to `reshaped` of shape: `[blockShape[0], ...,\r\n * blockShape[M-1], batch / prod(blockShape), x.shape[1], ...,\r\n * x.shape[N-1]]`\r\n *\r\n * 2. Permute dimensions of `reshaped`to produce `permuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1], blockShape[0], ..., x.shape[M],\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 3. Reshape `permuted` to produce `reshapedPermuted` of shape `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0], ..., x.shape[M] *\r\n * blockShape[M-1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * 4. Crop the start and end of dimensions `[1, ..., M]` of `reshapedPermuted`\r\n * according to `crops` to produce the output of shape: `[batch /\r\n * prod(blockShape),x.shape[1] * blockShape[0] - crops[0,0] - crops[0,1],\r\n * ..., x.shape[M] * blockShape[M-1] - crops[M-1,0] -\r\n * crops[M-1,1],x.shape[M+1], ..., x.shape[N-1]]`\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction batchToSpaceND_(x, blockShape, crops) {\n  const $x = convertToTensor(x, 'x', 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n  util.assert($x.rank >= 1 + blockShape.length, () => `input rank is ${$x.rank} but should be > than blockShape.length ${blockShape.length}`);\n  util.assert(crops.length === blockShape.length, () => `crops.length is ${crops.length} but should be equal to blockShape.length  ${blockShape.length}`);\n  util.assert($x.shape[0] % prod === 0, () => `input tensor batch is ${$x.shape[0]} but is not divisible by the product of ` + `the elements of blockShape ${blockShape.join(' * ')} === ${prod}`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    blockShape,\n    crops\n  };\n  return ENGINE.runKernel(BatchToSpaceND, inputs, attrs);\n}\nexport const batchToSpaceND = op({\n  batchToSpaceND_\n});","map":null,"metadata":{},"sourceType":"module"}