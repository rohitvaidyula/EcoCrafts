{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { io, Tensor } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\r\n * A `tf.GraphModel` is a directed, acyclic graph built from a\r\n * SavedModel GraphDef and allows inference execution.\r\n *\r\n * A `tf.GraphModel` can only be created by loading from a model converted from\r\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\r\n * the command line converter tool and loaded via `tf.loadGraphModel`.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Classes'}\r\n */\nexport class GraphModel {\n  /**\r\n   * @param modelUrl url for the model, or an `io.IOHandler`.\r\n   * @param weightManifestUrl url for the weight file generated by\r\n   * scripts/convert.py script.\r\n   * @param requestOption options for Request, which allows to send credentials\r\n   * and custom headers.\r\n   * @param onProgress Optional, progress callback function, fired periodically\r\n   * before the load is completed.\r\n   */\n  constructor(modelUrl, loadOptions = {}) {\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = 'n/a';\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion() {\n    return this.version;\n  }\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n  get inputs() {\n    return this.executor.inputs;\n  }\n  get outputs() {\n    return this.executor.outputs;\n  }\n  get weights() {\n    return this.executor.weightMap;\n  }\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n  get modelSignature() {\n    return this.signature;\n  }\n  findIOHandler() {\n    const path = this.modelUrl;\n    if (path.load != null) {\n      // Path is an IO Handler.\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n  /**\r\n   * Loads the model and weight files, construct the in memory weight map and\r\n   * compile the inference graph.\r\n   */\n  async load() {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    return this.loadSync(artifacts);\n  }\n  /**\r\n   * Synchronously construct the in memory weight map and\r\n   * compile the inference graph. Also initialize hashtable if any.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n   */\n  loadSync(artifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {\n      signature =\n      // tslint:disable-next-line:no-any\n      this.artifacts.userDefinedMetadata.signature;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n    return true;\n  }\n  /**\r\n   * Save the configuration and/or weights of the GraphModel.\r\n   *\r\n   * An `IOHandler` is an object that has a `save` method of the proper\r\n   * signature defined. The `save` method manages the storing or\r\n   * transmission of serialized data (\"artifacts\") that represent the\r\n   * model's topology and weights onto or via a specific medium, such as\r\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\r\n   * requests to a server. TensorFlow.js provides `IOHandler`\r\n   * implementations for a number of frequently used saving mediums, such as\r\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\r\n   * for more details.\r\n   *\r\n   * This method also allows you to refer to certain types of `IOHandler`s\r\n   * as URL-like string shortcuts, such as 'localstorage://' and\r\n   * 'indexeddb://'.\r\n   *\r\n   * Example 1: Save `model`'s topology and weights to browser [local\r\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n   * then load it back.\r\n   *\r\n   * ```js\r\n   * const modelUrl =\r\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\r\n   * const model = await tf.loadGraphModel(modelUrl);\r\n   * const zeros = tf.zeros([1, 224, 224, 3]);\r\n   * model.predict(zeros).print();\r\n   *\r\n   * const saveResults = await model.save('localstorage://my-model-1');\r\n   *\r\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\r\n   * console.log('Prediction from loaded model:');\r\n   * model.predict(zeros).print();\r\n   * ```\r\n   *\r\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\r\n   * scheme-based string shortcut for `IOHandler`.\r\n   * @param config Options for saving the model.\r\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\r\n   * the saving, such as byte sizes of the saved artifacts for the model's\r\n   *   topology and weight values.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n   */\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n    return handlerOrURL.save(this.artifacts);\n  }\n  /**\r\n   * Execute the inference for the input tensors.\r\n   *\r\n   * @param input The input tensors, when there is single input for the model,\r\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\r\n   * inputs params should be in either `tf.Tensor`[] if the input order is\r\n   * fixed, or otherwise NamedTensorMap format.\r\n   *\r\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\r\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\r\n   * follow the\r\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\r\n   *\r\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\r\n   * input type. For example, given the graph\r\n   *    InputNode => Intermediate => OutputNode,\r\n   * you can execute the subgraph Intermediate => OutputNode by calling\r\n   *    model.execute('IntermediateNode' : tf.tensor(...));\r\n   *\r\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\r\n   * state needs to be fed manually.\r\n   *\r\n   * For batch inference execution, the tensors for each input need to be\r\n   * concatenated together. For example with mobilenet, the required input shape\r\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\r\n   * If we are provide a batched data of 100 images, the input tensor should be\r\n   * in the shape of [100, 244, 244, 3].\r\n   *\r\n   * @param config Prediction configuration for specifying the batch size and\r\n   * output node names. Currently the batch size option is ignored for graph\r\n   * model.\r\n   *\r\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\r\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\r\n   * will be returned for model with multiple outputs.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  predict(inputs, config) {\n    return this.execute(inputs, this.outputNodes);\n  }\n  normalizeInputs(inputs) {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputs[i];\n      return map;\n    }, {});\n  }\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  /**\r\n   * Executes inference for the model for given input tensors.\r\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\r\n   * model, keyed by the input node names.\r\n   * @param outputs output node name from the Tensorflow model, if no\r\n   * outputs are specified, the default outputs of the model would be used.\r\n   * You can inspect intermediate nodes of the model by adding them to the\r\n   * outputs array.\r\n   *\r\n   * @returns A single tensor if provided with a single output or no outputs\r\n   * are provided and there is only one default output, otherwise return a\r\n   * tensor array. The order of the tensor array is the same as the outputs\r\n   * if provided, otherwise the order of outputNodes attribute of the model.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  execute(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\r\n   * Executes inference for the model for given input tensors in async\r\n   * fashion, use this method when your model contains control flow ops.\r\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\r\n   * model, keyed by the input node names.\r\n   * @param outputs output node name from the Tensorflow model, if no outputs\r\n   * are specified, the default outputs of the model would be used. You can\r\n   * inspect intermediate nodes of the model by adding them to the outputs\r\n   * array.\r\n   *\r\n   * @returns A Promise of single tensor if provided with a single output or\r\n   * no outputs are provided and there is only one default output, otherwise\r\n   * return a tensor map.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  async executeAsync(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\r\n   * Releases the memory used by the weight tensors and resourceManager.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  dispose() {\n    this.executor.dispose();\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n    this.resourceManager.dispose();\n  }\n}\n/**\r\n * Load a graph model given a URL to the model definition.\r\n *\r\n * Example of loading MobileNetV2 from a URL and making a prediction with a\r\n * zeros input:\r\n *\r\n * ```js\r\n * const modelUrl =\r\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\r\n * const model = await tf.loadGraphModel(modelUrl);\r\n * const zeros = tf.zeros([1, 224, 224, 3]);\r\n * model.predict(zeros).print();\r\n * ```\r\n *\r\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\r\n * a zeros input:\r\n *\r\n * ```js\r\n * const modelUrl =\r\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\r\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\r\n * const zeros = tf.zeros([1, 224, 224, 3]);\r\n * model.predict(zeros).print();\r\n * ```\r\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\r\n * @param options Options for the HTTP request, which allows to send credentials\r\n *    and custom headers.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Loading'}\r\n */\nexport async function loadGraphModel(modelUrl, options = {}) {\n  if (modelUrl == null) {\n    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n  if (options.fromTFHub) {\n    if (modelUrl.load == null) {\n      if (!modelUrl.endsWith('/')) {\n        modelUrl = modelUrl + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}","map":null,"metadata":{},"sourceType":"module"}