{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { LogicalOr } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\r\n * Returns the truth value of `a OR b` element-wise. Supports broadcasting.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([false, false, true, true], 'bool');\r\n * const b = tf.tensor1d([false, true, false, true], 'bool');\r\n *\r\n * a.logicalOr(b).print();\r\n * ```\r\n * @param a The first input tensor. Must be of dtype bool.\r\n * @param b The second input tensor. Must be of dtype bool.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Logical'}\r\n */\nfunction logicalOr_(a, b) {\n  const $a = convertToTensor(a, 'a', 'logicalOr', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalOr', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(LogicalOr, inputs);\n}\nexport const logicalOr = op({\n  logicalOr_\n});","map":null,"metadata":{},"sourceType":"module"}