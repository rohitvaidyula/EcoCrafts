{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { MirrorPad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Pads a `tf.Tensor` using mirror padding.\r\n *\r\n * This operation implements the `REFLECT` and `SYMMETRIC` modes of pad.\r\n *\r\n * ```js\r\n * const x = tf.range(0, 9).reshape([1, 1, 3, 3]);\r\n * x.mirrorPad([[0, 0], [0, 0], [2, 2], [2, 2]], 'reflect').print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * In \"reflect\" mode, the padded regions do not include the borders,\r\n * while in \"symmetric\" mode the padded regions do include the borders.\r\n * For example, if the input is `[1, 2, 3]` and paddings is `[0, 2]`,\r\n * then the output is `[1, 2, 3, 2, 1]` in \"reflect\" mode, and\r\n * `[1, 2, 3, 3, 2]` in \"symmetric\" mode.\r\n * If `mode` is \"reflect\" then both `paddings[D, 0]` and `paddings[D, 1]`\r\n * must be no greater than `x.shape[D] - 1`. If mode is \"symmetric\"\r\n * then both `paddings[D, 0]` and `paddings[D, 1]` must be no greater than\r\n * `x.shape[D]`\r\n * @param mode String to specify padding mode. Can be `'reflect' | 'symmetric'`\r\n */\n/** @doc {heading: 'Tensors', subheading: 'Transformations'} */\nfunction mirrorPad_(x, paddings, mode) {\n  util.assert(mode === 'reflect' || mode === 'symmetric', () => `Invalid mode. Mode must be either reflect or symmetric. ` + `Got ${mode}.`);\n  const $x = convertToTensor(x, 'x', 'mirrorPad');\n  if ($x.rank === 0) {\n    throw new Error('mirrorPad(scalar) is not defined. ' + 'Pass non-scalar to mirrorPad');\n  }\n  util.assert(paddings.length === $x.rank, () => `Padding doesn't match input. Must be ${$x.rank}. ` + `Got ${paddings.length}.`);\n  const shapeOffset = mode === 'reflect' ? 1 : 0;\n  for (let i = 0; i < $x.rank; i++) {\n    util.assert(paddings[i].length === 2, () => `Invalid number of paddings. Must be length of 2 each.`);\n    util.assert(paddings[i][0] >= 0 && paddings[i][0] <= $x.shape[i] - shapeOffset && paddings[i][1] >= 0 && paddings[i][1] <= $x.shape[i] - shapeOffset, () => `Padding in dimension ${i} cannot be greater than or equal ` + `to ${$x.shape[i] - shapeOffset} or less than 0 for input of ` + `shape ${$x.shape}`);\n  }\n  const attrs = {\n    paddings,\n    mode\n  };\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(MirrorPad, inputs, attrs);\n}\nexport const mirrorPad = op({\n  mirrorPad_\n});","map":null,"metadata":{},"sourceType":"module"}