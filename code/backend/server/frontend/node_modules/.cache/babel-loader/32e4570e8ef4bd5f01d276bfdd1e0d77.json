{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\r\n * Check validity of user-defined metadata.\r\n *\r\n * @param userDefinedMetadata\r\n * @param modelName Name of the model that the user-defined metadata belongs to.\r\n *   Used during construction of error messages.\r\n * @param checkSize Whether to check the size of the metadata is under\r\n *   recommended limit. Default: `false`. If `true`, will try stringify the\r\n *   JSON object and print a console warning if the serialzied size is above the\r\n *   limit.\r\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\r\n */\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName, checkSize = false) {\n  if (userDefinedMetadata == null || typeof userDefinedMetadata !== 'object' || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n  }\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` + `size (length=${out.length} when serialized). It is not ` + `recommended to store such large objects in user-defined metadata. ` + `Please make sure its serialized length is <= ` + `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n/**\r\n * Check if an input is plain JSON object or any valid subfield of it.\r\n *\r\n * @param x The input to be checked.\r\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\r\n *   cases of arrays and primitives.\r\n * @return Returns `true` if and only if `x` is a plain JSON object,\r\n *   a JSON-valid primitive including string, number, boolean and null,\r\n *   or an array of the said types.\r\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x) {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {\n          // Recursive call.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {\n            // Recursive call.\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}","map":null,"metadata":{},"sourceType":"module"}