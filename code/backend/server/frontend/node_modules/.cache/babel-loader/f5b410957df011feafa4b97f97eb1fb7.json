{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { SpaceToBatchND } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * This operation divides \"spatial\" dimensions `[1, ..., M]` of the input into\r\n * a grid of blocks of shape `blockShape`, and interleaves these blocks with\r\n * the \"batch\" dimension (0) such that in the output, the spatial\r\n * dimensions `[1, ..., M]` correspond to the position within the grid,\r\n * and the batch dimension combines both the position within a spatial block\r\n * and the original batch position. Prior to division into blocks,\r\n * the spatial dimensions of the input are optionally zero padded\r\n * according to `paddings`. See below for a precise description.\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 2, 2, 1]);\r\n * const blockShape = [2, 2];\r\n * const paddings = [[0, 0], [0, 0]];\r\n *\r\n * x.spaceToBatchND(blockShape, paddings).print();\r\n * ```\r\n *\r\n * @param x A `tf.Tensor`. N-D with `x.shape` = `[batch] + spatialShape +\r\n * remainingShape`, where spatialShape has `M` dimensions.\r\n * @param blockShape A 1-D array. Must have shape `[M]`, all values must\r\n * be >= 1.\r\n * @param paddings A 2-D array. Must have shape `[M, 2]`, all values must be >=\r\n *     0. `paddings[i] = [padStart, padEnd]` specifies the amount to zero-pad\r\n * from input dimension `i + 1`, which corresponds to spatial dimension `i`. It\r\n * is required that\r\n * `(inputShape[i + 1] + padStart + padEnd) % blockShape[i] === 0`\r\n *\r\n * This operation is equivalent to the following steps:\r\n *\r\n * 1. Zero-pad the start and end of dimensions `[1, ..., M]` of the input\r\n * according to `paddings` to produce `padded` of shape paddedShape.\r\n *\r\n * 2. Reshape `padded` to `reshapedPadded` of shape:\r\n * `[batch] + [paddedShape[1] / blockShape[0], blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1], blockShape[M-1]] + remainingShape`\r\n *\r\n * 3. Permute dimensions of `reshapedPadded` to produce `permutedReshapedPadded`\r\n * of shape: `blockShape + [batch] + [paddedShape[1] / blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\r\n *\r\n * 4. Reshape `permutedReshapedPadded` to flatten `blockShape` into the\r\n * batch dimension, producing an output tensor of shape:\r\n * `[batch * prod(blockShape)] + [paddedShape[1] / blockShape[0], ...,\r\n * paddedShape[M] / blockShape[M-1]] + remainingShape`\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction spaceToBatchND_(x, blockShape, paddings) {\n  const $x = convertToTensor(x, 'x', 'spaceToBatchND');\n  util.assert($x.rank >= 1 + blockShape.length, () => `input rank ${$x.rank} should be > than [blockShape] ${blockShape.length}`);\n  util.assert(paddings.length === blockShape.length, () => `paddings.shape[0] ${paddings.length} must be equal to [blockShape] ${blockShape.length}`);\n  util.assert($x.shape.reduce((a, b, i) => {\n    if (i > 0 && i <= blockShape.length) {\n      return a && (b + paddings[i - 1][0] + paddings[i - 1][1]) % blockShape[i - 1] === 0;\n    }\n    return a;\n  }, true), () => `input spatial dimensions ${$x.shape.slice(1)} with paddings ${paddings.toString()} must be divisible by blockShapes ${blockShape.toString()}`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    blockShape,\n    paddings\n  };\n  return ENGINE.runKernel(SpaceToBatchND, inputs, attrs);\n}\nexport const spaceToBatchND = op({\n  spaceToBatchND_\n});","map":null,"metadata":{},"sourceType":"module"}