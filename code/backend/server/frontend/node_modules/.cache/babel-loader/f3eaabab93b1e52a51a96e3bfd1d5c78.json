{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Finds the values and indices of the `k` largest entries along the last\r\n * dimension.\r\n *\r\n * If the input is a vector (rank=1), finds the k largest entries in the vector\r\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\r\n * largest entry in input, and its index is indices[j].\r\n * For higher rank inputs, computes the top k entries along the last dimension.\r\n *\r\n * If two elements are equal, the lower-index element appears first.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\r\n * const {values, indices} = tf.topk(a);\r\n * values.print();\r\n * indices.print();\r\n * ```\r\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\r\n * @param k Number of top elements to look for along the last dimension.\r\n * @param sorted If true, the resulting `k` elements will be sorted by the\r\n *     values in descending order.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\nfunction topk_(x, k = 1, sorted = true) {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n  if (k > lastDim) {\n    throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);\n  }\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    k,\n    sorted\n  };\n  const [values, indices] = ENGINE.runKernel(TopK, inputs, attrs);\n  return {\n    values,\n    indices\n  };\n}\nexport const topk = op({\n  topk_\n});","map":null,"metadata":{},"sourceType":"module"}