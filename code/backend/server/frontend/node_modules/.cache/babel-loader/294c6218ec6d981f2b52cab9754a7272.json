{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { dispose } from '../globals';\nimport { variableGrads } from '../gradients';\nimport { scalar } from '../ops/ops';\nimport { Serializable } from '../serialization';\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport class Optimizer extends Serializable {\n  /**\r\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\r\n   * gradients of y with respect to the list of trainable variables provided by\r\n   * `varList`. If no list is provided, it defaults to all trainable variables.\r\n   *\r\n   * @param f The function to execute and whose output to minimize.\r\n   * @param returnCost Whether to return the scalar cost value produced by\r\n   * executing `f()`.\r\n   * @param varList An optional list of variables to update. If specified, only\r\n   * the trainable variables in varList will be updated by minimize. Defaults to\r\n   * all trainable variables.\r\n   *\r\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\r\n   */\n  minimize(f, returnCost = false, varList) {\n    const {\n      value,\n      grads\n    } = this.computeGradients(f, varList);\n    if (varList != null) {\n      const gradArray = varList.map(v => ({\n        name: v.name,\n        tensor: grads[v.name]\n      }));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n    // Dispose gradients.\n    dispose(grads);\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n  /**\r\n   * The number of iterations that this optimizer instance has been invoked for.\r\n   */\n  get iterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n  incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n  /**\r\n   * Executes f() and computes the gradient of the scalar output of f() with\r\n   * respect to the list of trainable variables provided by `varList`. If no\r\n   * list is provided, it defaults to all trainable variables.\r\n   *\r\n   * @param f The function to execute and whose output to use for computing\r\n   * gradients with respect to variables.\r\n   * @param varList An optional list of variables to compute gradients with\r\n   * respect to. If specified, only the trainable variables in varList will have\r\n   * gradients computed with respect to. Defaults to all trainable variables.\r\n   *\r\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\r\n   */\n  computeGradients(f, varList) {\n    return variableGrads(f, varList);\n  }\n  /**\r\n   * Dispose the variables (if any) owned by this optimizer instance.\r\n   */\n  dispose() {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n  async saveIterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n  async getWeights() {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n  async setWeights(weightValues) {\n    throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);\n  }\n  /**\r\n   * Extract the first element of the weight values and set it\r\n   * as the iterations counter variable of this instance of optimizer.\r\n   *\r\n   * @param weightValues\r\n   * @returns Weight values with the first element consumed and excluded.\r\n   */\n  async extractIterations(weightValues) {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: instance => {\n    return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}