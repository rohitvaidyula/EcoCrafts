{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\r\n * Delete the entire database for tensorflow.js, including the models store.\r\n */\nexport async function deleteDatabase() {\n  const idbFactory = getIndexedDBFactory();\n  return new Promise((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\r\n * IOHandler subclass: Browser IndexedDB.\r\n *\r\n * See the doc string of `browserIndexedDB` for more details.\r\n */\nexport class BrowserIndexedDB {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n  async save(modelArtifacts) {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  /**\r\n   * Perform database action to put model artifacts into or read model artifacts\r\n   * from IndexedDB object store.\r\n   *\r\n   * Whether the action is put or get depends on whether `modelArtifacts` is\r\n   * specified. If it is specified, the action will be put; otherwise the action\r\n   * will be get.\r\n   *\r\n   * @param modelPath A unique string path for the model.\r\n   * @param modelArtifacts If specified, it will be the model artifacts to be\r\n   *   stored in IndexedDB.\r\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\r\n   *   of `ModelArtifacts`, if the action is get.\r\n   */\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest = infoStore.put({\n            modelPath: this.modelPath,\n            modelArtifactsInfo\n          });\n          let modelTx;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({\n              modelArtifactsInfo\n            });\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\r\n * Creates a browser IndexedDB IOHandler for saving and loading models.\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save('indexeddb://MyModel'));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * @param modelPath A unique identifier for the model to be saved. Must be a\r\n *   non-empty string.\r\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\r\n *   which can be used with, e.g., `tf.Model.save`.\r\n */\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\nexport class BrowserIndexedDBManager {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n        const store = tx.objectStore(INFO_STORE_NAME);\n        // tslint:disable:max-line-length\n        // Need to cast `store` as `any` here because TypeScript's DOM\n        // library does not have the `getAll()` method even though the\n        // method is supported in the latest version of most mainstream\n        // browsers:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n        // tslint:enable:max-line-length\n        // tslint:disable-next-line:no-any\n        const getAllInfoRequest = store.getAll();\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n          resolve(out);\n        };\n        getAllInfoRequest.onerror = error => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n        tx.oncomplete = () => db.close();\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module"}