{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map';\n// TODO(soergel): consider vectorized operations within the pipeline.\n/**\r\n * Represents a potentially large list of independent data elements (typically\r\n * 'samples' or 'examples').\r\n *\r\n * A 'data example' may be a primitive, an array, a map from string keys to\r\n * values, or any nested structure of these.\r\n *\r\n * A `Dataset` represents an ordered collection of elements, together with a\r\n * chain of transformations to be performed on those elements. Each\r\n * transformation is a method of `Dataset` that returns another `Dataset`, so\r\n * these may be chained, e.g.\r\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\r\n *\r\n * Data loading and transformation is done in a lazy, streaming fashion.  The\r\n * dataset may be iterated over multiple times; each iteration starts the data\r\n * loading anew and recapitulates the transformations.\r\n *\r\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\r\n * its transformations are applied one example at a time. Batching produces a\r\n * new `Dataset` where each element is a batch. Batching should usually come\r\n * last in a pipeline, because data transformations are easier to express on a\r\n * per-example basis than on a per-batch basis.\r\n *\r\n * The following code examples are calling `await dataset.forEachAsync(...)` to\r\n * iterate once over the entire dataset in order to print out the data.\r\n *\r\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\r\n */\nexport class Dataset {\n  constructor() {\n    this.size = null;\n  }\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n  /**\r\n   * Groups elements into batches.\r\n   *\r\n   * It is assumed that each of the incoming dataset elements has the same\r\n   * structure-- i.e. the same set of keys at each location in an object\r\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\r\n   * element collecting all of the incoming values for that key.\r\n   *\r\n   *  * Incoming primitives are grouped into a 1-D Tensor.\r\n   *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\r\n   *    the batch dimension.\r\n   *  * Incoming arrays are converted to Tensor and then batched.\r\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\r\n   *    has n+1 dimensions.\r\n   *  * An array that cannot be converted to Tensor produces an error.\r\n   *\r\n   * If an array should not be batched as a unit, it should first be converted\r\n   * to an object with integer keys.\r\n   *\r\n   * Here are a few examples:\r\n   *\r\n   * Batch a dataset of numbers:\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\r\n   * await a.forEachAsync(e => e.print());\r\n   * ```\r\n   *\r\n   * Batch a dataset of arrays:\r\n   * ```js\r\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\r\n   * await b.forEachAsync(e => e.print());\r\n   * ```\r\n   *\r\n   * Batch a dataset of objects:\r\n   * ```js\r\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\r\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\r\n   *   {a: 8, b: 18}]).batch(4);\r\n   * await c.forEachAsync(e => {\r\n   *   console.log('{');\r\n   *   for(var key in e) {\r\n   *     console.log(key+':');\r\n   *     e[key].print();\r\n   *   }\r\n   *   console.log('}');\r\n   * })\r\n   * ```\r\n   *\r\n   * @param batchSize The number of elements desired per batch.\r\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\r\n   *   than batchSize elements. Default true.\r\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  batch(batchSize, smallLastBatch = true) {\n    const base = this;\n    tf.util.assert(batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n  /**\r\n   * Concatenates this `Dataset` with another.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3]);\r\n   * const b = tf.data.array([4, 5, 6]);\r\n   * const c = a.concatenate(b);\r\n   * await c.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param dataset A `Dataset` to be concatenated onto this one.\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  concatenate(dataset) {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).concatenate(await dataset.iterator()), size);\n  }\n  /**\r\n   * Filters this dataset according to `predicate`.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\r\n   *   .filter(x => x%2 === 0);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param predicate A function mapping a dataset element to a boolean or a\r\n   * `Promise` for one.\r\n   *\r\n   * @returns A `Dataset` of elements for which the predicate was true.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  filter(predicate) {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n  /**\r\n   * Apply a function to every element of the dataset.\r\n   *\r\n   * After the function is applied to a dataset element, any Tensors contained\r\n   * within that element are disposed.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3]);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param f A function to apply to each dataset element.\r\n   * @returns A `Promise` that resolves after all elements have been processed.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  async forEachAsync(f) {\n    return (await this.iterator()).forEachAsync(f);\n  }\n  /**\r\n   * Maps this dataset through a 1-to-1 transform.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param transform A function mapping a dataset element to a transformed\r\n   *   dataset element.\r\n   *\r\n   * @returns A `Dataset` of transformed elements.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  map(transform) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n  /**\r\n   * Maps this dataset through an async 1-to-1 transform.\r\n   *\r\n   * ```js\r\n   * const a =\r\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\r\n   *    setTimeout(() => {\r\n   *      resolve(x * x);\r\n   *    }, Math.random()*1000 + 500);\r\n   *  }));\r\n   * console.log(await a.toArray());\r\n   * ```\r\n   *\r\n   * @param transform A function mapping a dataset element to a `Promise` for a\r\n   *   transformed dataset element.  This transform is responsible for disposing\r\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\r\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\r\n   *   `map()` case).\r\n   *\r\n   * @returns A `Dataset` of transformed elements.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  mapAsync(transform) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n  /**\r\n   *  Creates a `Dataset` that prefetches elements from this dataset.\r\n   *\r\n   * @param bufferSize: An integer specifying the number of elements to be\r\n   *   prefetched.\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  prefetch(bufferSize) {\n    if (bufferSize == null) {\n      throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n    const base = this;\n    return datasetFromIteratorFn(async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n  /**\r\n   * Repeats this dataset `count` times.\r\n   *\r\n   * NOTE: If this dataset is a function of global state (e.g. a random number\r\n   * generator), then different repetitions may produce different elements.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param count: (Optional) An integer, representing the number of times\r\n   *   the dataset should be repeated. The default behavior (if `count` is\r\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  repeat(count) {\n    const base = this;\n    let size;\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(async () => ({\n        value: await base.iterator(),\n        done: false\n      }));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n  /**\r\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param count: The number of elements of this dataset that should be skipped\r\n   *   to form the new dataset.  If `count` is greater than the size of this\r\n   *   dataset, the new dataset will contain no elements.  If `count`\r\n   *   is `undefined` or negative, skips the entire dataset.\r\n   *\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  skip(count) {\n    const base = this;\n    let size;\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (this.size != null && (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).skip(count), size);\n  }\n  /**\r\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\r\n   * streaming manner, by sampling from a given number of prefetched elements.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param bufferSize: An integer specifying the number of elements from this\r\n   *   dataset from which the new dataset will sample.\r\n   * @param seed: (Optional) An integer specifying the random seed that will\r\n   *   be used to create the distribution.\r\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\r\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\r\n   *   it is iterated over. If false, elements will be returned in the same\r\n   *   shuffled order on each iteration. (Defaults to `true`.)\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  shuffle(bufferSize, seed, reshuffleEachIteration = true) {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' + 'If your data fits in main memory (for regular JS objects), ' + 'and/or GPU memory (for `tf.Tensor`s), consider setting ' + `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n  /**\r\n   * Creates a `Dataset` with at most `count` initial elements from this\r\n   * dataset.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\r\n   * await a.forEachAsync(e => console.log(e));\r\n   * ```\r\n   *\r\n   * @param count: The number of elements of this dataset that should be taken\r\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\r\n   *   `count` is greater than the size of this dataset, the new dataset will\r\n   *   contain all elements of this dataset.\r\n   * @returns A `Dataset`.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  take(count) {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => (await base.iterator()).take(count), size);\n  }\n  /**\r\n   * Collect all elements of this dataset into an array.\r\n   *\r\n   * Obviously this will succeed only for small datasets that fit in memory.\r\n   * Useful for testing and generally should be avoided if possible.\r\n   *\r\n   * ```js\r\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\r\n   * console.log(await a.toArray());\r\n   * ```\r\n   *\r\n   * @returns A Promise for an array of elements, which will resolve\r\n   *   when a new stream has been obtained and fully consumed.\r\n   *\r\n   * @doc {heading: 'Data', subheading: 'Classes'}\r\n   */\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArray();\n  }\n  /**\r\n   * Collect all elements of this dataset into an array with prefetching 100\r\n   * elements. This is useful for testing, because the prefetch changes the\r\n   * order in which the Promises are resolved along the processing pipeline.\r\n   * This may help expose bugs where results are dependent on the order of\r\n   * Promise resolution rather than on the logical order of the stream (i.e.,\r\n   * due to hidden mutable state).\r\n   *\r\n   * @returns A Promise for an array of elements, which will resolve\r\n   *   when a new stream has been obtained and fully consumed.\r\n   */\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n}\n// TODO(soergel): deep sharded shuffle, where supported\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\r\n * Create a `Dataset` defined by a provided iterator() function.\r\n *\r\n * ```js\r\n * let i = -1;\r\n * const func = () =>\r\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\r\n * const iter = tf.data.iteratorFromFunction(func);\r\n * const ds = tf.data.datasetFromIteratorFn(iter);\r\n * await ds.forEachAsync(e => console.log(e));\r\n * ```\r\n */\nexport function datasetFromIteratorFn(iteratorFn, size = null) {\n  return new class extends Dataset {\n    constructor() {\n      super(...arguments);\n      this.size = size;\n    }\n    /*\r\n     * Provide a new stream of elements.  Note this will also start new streams\r\n     * from any underlying `Dataset`s.\r\n     */\n    async iterator() {\n      return iteratorFn();\n    }\n  }();\n}\n/**\r\n * Create a `Dataset` from an array of elements.\r\n *\r\n * Create a Dataset from an array of objects:\r\n * ```js\r\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\r\n * await a.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Create a Dataset from an array of numbers:\r\n * ```js\r\n * const a = tf.data.array([4, 5, 6]);\r\n * await a.forEachAsync(e => console.log(e));\r\n * ```\r\n * @param items An array of elements that will be parsed as items in a dataset.\r\n *\r\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\r\n */\nexport function array(items) {\n  return datasetFromIteratorFn(async () => iteratorFromItems(items), items.length);\n}\n/**\r\n * Create a `Dataset` by zipping together an array, dict, or nested\r\n * structure of `Dataset`s (and perhaps additional constants).\r\n * The underlying datasets must provide elements in a consistent order such that\r\n * they correspond.\r\n *\r\n * The number of elements in the resulting dataset is the same as the size of\r\n * the smallest dataset in datasets.\r\n *\r\n * The nested structure of the `datasets` argument determines the\r\n * structure of elements in the resulting iterator.\r\n *\r\n * Note this means that, given an array of two datasets that produce dict\r\n * elements, the result is a dataset that produces elements that are arrays\r\n * of two dicts:\r\n *\r\n * Zip an array of datasets:\r\n * ```js\r\n * console.log('Zip two datasets of objects:');\r\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\r\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\r\n * const ds3 = tf.data.zip([ds1, ds2]);\r\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\r\n *\r\n * // If the goal is to merge the dicts in order to produce elements like\r\n * // {a: ..., b: ...}, this requires a second step such as:\r\n * console.log('Merge the objects:');\r\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\r\n * await ds4.forEachAsync(e => console.log(e));\r\n * ```\r\n *\r\n * Zip a dict of datasets:\r\n * ```js\r\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\r\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\r\n * const c = tf.data.zip({c: a, d: b});\r\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\r\n * ```\r\n *\r\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\r\n */\nexport function zip(datasets) {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);\n    }\n  }\n  return datasetFromIteratorFn(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {\n          value: d.iterator(),\n          recurse: false\n        };\n      } else if (isIterable(d)) {\n        return {\n          value: null,\n          recurse: true\n        };\n      } else {\n        throw new Error('Leaves of the structure passed to zip() must be Datasets, ' + 'not primitives.');\n      }\n    });\n    return iteratorFromZipped(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n/**\r\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\r\n *\r\n * Accepts an array of identically-structured nested elements and either batches\r\n * them (if they are primitives, numeric arrays, or Tensors) or requests\r\n * recursion (if not).\r\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows) {\n  if (rows === null) {\n    return null;\n  }\n  // use the first item to decide whether to recurse or batch here.\n  const exampleRow = rows[0];\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {\n      value,\n      recurse: false\n    };\n  }\n  // the example row is an object, so recurse into it.\n  return {\n    value: null,\n    recurse: true\n  };\n}\n/**\r\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\r\n * into a single new Tensor where axis 0 is the batch dimension.\r\n */\nfunction batchConcat(arrays) {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}