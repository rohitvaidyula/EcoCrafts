{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Dilation2D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the grayscale dilation over the input `x`.\r\n *\r\n * @param x The input tensor, rank 3 or rank 4 of shape\r\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\r\n * @param filter The filter tensor, rank 3, of shape\r\n *     `[filterHeight, filterWidth, depth]`.\r\n * @param strides The strides of the sliding window for each dimension of the\r\n *     input tensor: `[strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dataFormat Specify the data format of the input and output data.\r\n *      Defaults to 'NHWC'. Only 'NHWC' is currently supported. With the\r\n *      default format \"NHWC\", the data is stored in the order of: [batch,\r\n *      height, width, channels].\r\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the height and width dimensions\r\n *     for atrous morphological dilation. Defaults to `[1, 1]`. If `dilations`\r\n *     is a single number, then `dilationHeight == dilationWidth`. If it is\r\n *     greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\nfunction dilation2d_(x, filter, strides, pad, dilations = [1, 1], dataFormat = 'NHWC') {\n  const $x = convertToTensor(x, 'x', 'dilation2d');\n  const $filter = convertToTensor(filter, 'filter', 'dilation2d');\n  util.assert($x.rank === 3 || $x.rank === 4, () => `Error in dilation2d: input must be rank 3 or 4, but got rank ` + `${$x.rank}.`);\n  util.assert($filter.rank === 3, () => `Error in dilation2d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);\n  util.assert(dataFormat === 'NHWC', () => `Error in dilation2d: Only NHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n    reshapedTo4D = true;\n  }\n  const inputs = {\n    x: x4D,\n    filter: $filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dilations\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(Dilation2D, inputs, attrs);\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n  return res;\n}\nexport const dilation2d = op({\n  dilation2d_\n});","map":null,"metadata":{},"sourceType":"module"}