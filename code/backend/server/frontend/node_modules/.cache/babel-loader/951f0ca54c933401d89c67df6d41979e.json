{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Diag } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Returns a diagonal tensor with a given diagonal values.\r\n *\r\n * Given a diagonal, this operation returns a tensor with the diagonal and\r\n * everything else padded with zeros.\r\n *\r\n * Assume the input has dimensions `[D1,..., Dk]`, then the output is a tensor\r\n * of rank 2k with dimensions `[D1,..., Dk, D1,..., Dk]`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * tf.diag(x).print()\r\n * ```\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4, 5, 6, 6, 8], [4, 2])\r\n *\r\n * tf.diag(x).print()\r\n * ```\r\n * @param x The input tensor.\r\n */\nfunction diag_(x) {\n  const $x = convertToTensor(x, 'x', 'diag');\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(Diag, inputs);\n}\nexport const diag = op({\n  diag_\n});","map":null,"metadata":{},"sourceType":"module"}