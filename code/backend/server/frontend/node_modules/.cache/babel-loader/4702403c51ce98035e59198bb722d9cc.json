{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { GatherV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Gather slices from tensor `x`'s axis `axis` according to `indices`.\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * const indices = tf.tensor1d([1, 3, 3], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n * const indices = tf.tensor1d([1, 1, 0], 'int32');\r\n *\r\n * x.gather(indices).print();\r\n * ```\r\n * @param x The input tensor whose slices to be gathered.\r\n * @param indices The indices of the values to extract.\r\n * @param axis The axis over which to select values. Defaults to 0.\r\n * @param batchDims Optional. The number of batch dimensions. It must be less\r\n *     than or equal to rank(indices). Defaults to 0.\r\n *     The output tensor will have shape of\r\n *     `x.shape[:axis] + indices.shape[batchDims:] + x.shape[axis + 1:]`\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction gather_(x, indices, axis = 0, batchDims = 0) {\n  const $x = convertToTensor(x, 'x', 'gather');\n  const $indices = convertToTensor(indices, 'indices', 'gather', 'int32');\n  const inputs = {\n    x: $x,\n    indices: $indices\n  };\n  const attrs = {\n    axis,\n    batchDims\n  };\n  return ENGINE.runKernel(GatherV2, inputs, attrs);\n}\nexport const gather = op({\n  gather_\n});","map":null,"metadata":{},"sourceType":"module"}