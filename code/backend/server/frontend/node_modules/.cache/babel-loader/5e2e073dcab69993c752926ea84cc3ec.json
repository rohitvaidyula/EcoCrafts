{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Unique } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert } from '../util';\nimport { op } from './operation';\n/**\r\n * Finds unique elements along an axis of a tensor.\r\n *\r\n * It returns a tensor `values` containing all of the unique elements along the\r\n * `axis` of the given tensor `x` in the same order that they occur along the\r\n * `axis` in `x`; `x` does not need to be sorted. It also returns a tensor\r\n * `indices` the same size as the number of the elements in `x` along the `axis`\r\n * dimension. It contains the index in the unique output `values`.\r\n *\r\n * ```js\r\n * // A 1-D tensor\r\n * const a = tf.tensor1d([1, 1, 2, 4, 4, 4, 7, 8, 8]);\r\n * const {values, indices} = tf.unique(a);\r\n * values.print();   // [1, 2, 4, 7, 8,]\r\n * indices.print();  // [0, 0, 1, 2, 2, 2, 3, 4, 4]\r\n * ```\r\n *\r\n * ```js\r\n * // A 2-D tensor with axis=0\r\n * //\r\n * // 'a' is: [[1, 0, 0],\r\n * //          [1, 0, 0],\r\n * //          [2, 0, 0]]\r\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\r\n * const {values, indices} = tf.unique(a, 0)\r\n * values.print();   // [[1, 0, 0],\r\n *                   //  [2, 0, 0]]\r\n * indices.print();  // [0, 0, 1]\r\n * ```\r\n *\r\n * ```js\r\n * // A 2-D tensor with axis=1\r\n * //\r\n * // 'a' is: [[1, 0, 0],\r\n * //          [1, 0, 0],\r\n * //          [2, 0, 0]]\r\n * const a = tf.tensor2d([[1, 0, 0], [1, 0, 0], [2, 0, 0]]);\r\n * const {values, indices} = tf.unique(a, 1)\r\n * values.print();   // [[1, 0],\r\n *                   //  [1, 0],\r\n *                   //  [2, 0]]\r\n * indices.print();  // [0, 1, 1]\r\n * ```\r\n * @param x A tensor (int32, string, bool).\r\n * @param axis The axis of the tensor to find the unique elements.\r\n * @returns [uniqueElements, indices] (see above for details)\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\nfunction unique_(x, axis = 0) {\n  const $x = convertToTensor(x, 'x', 'unique', 'string_or_numeric');\n  assert($x.rank > 0, () => 'The input tensor must be at least 1D');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis\n  };\n  const [values, indices] = ENGINE.runKernel(Unique, inputs, attrs);\n  return {\n    values,\n    indices\n  };\n}\nexport const unique = op({\n  unique_\n});","map":null,"metadata":{},"sourceType":"module"}