{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n/**\r\n * IOHandler implementations based on HTTP requests in the web browser.\r\n *\r\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n    const init = Object.assign({\n      method: this.DEFAULT_METHOD\n    }, this.requestInit);\n    init.body = new FormData();\n    const weightsManifest = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = {\n      modelTopology: modelArtifacts.modelTopology,\n      format: modelArtifacts.format,\n      generatedBy: modelArtifacts.generatedBy,\n      convertedBy: modelArtifacts.convertedBy,\n      weightsManifest\n    };\n    if (modelArtifacts.signature != null) {\n      modelTopologyAndWeightManifest.signature = modelArtifacts.signature;\n    }\n    if (modelArtifacts.userDefinedMetadata != null) {\n      modelTopologyAndWeightManifest.userDefinedMetadata = modelArtifacts.userDefinedMetadata;\n    }\n    if (modelArtifacts.modelInitializer != null) {\n      modelTopologyAndWeightManifest.modelInitializer = modelArtifacts.modelInitializer;\n    }\n    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n      type: JSON_TYPE\n    }), 'model.json');\n    if (modelArtifacts.weightData != null) {\n      init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n        type: OCTET_STREAM_MIME_TYPE\n      }), 'model.weights.bin');\n    }\n    const response = await this.fetch(this.path, init);\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n    }\n  }\n  /**\r\n   * Load model artifacts via HTTP request(s).\r\n   *\r\n   * See the documentation to `tf.io.http` for details on the saved\r\n   * artifacts.\r\n   *\r\n   * @returns The loaded model artifacts (if loading succeeds).\r\n   */\n  async load() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n    }\n    let modelConfig;\n    try {\n      modelConfig = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n    const modelTopology = modelConfig.modelTopology;\n    const weightsManifest = modelConfig.weightsManifest;\n    const generatedBy = modelConfig.generatedBy;\n    const convertedBy = modelConfig.convertedBy;\n    const format = modelConfig.format;\n    const signature = modelConfig.signature;\n    const userDefinedMetadata = modelConfig.userDefinedMetadata;\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);\n    }\n    let weightSpecs;\n    let weightData;\n    if (weightsManifest != null) {\n      const results = await this.loadWeights(weightsManifest);\n      [weightSpecs, weightData] = results;\n    }\n    const artifacts = {\n      modelTopology,\n      weightSpecs,\n      weightData,\n      generatedBy,\n      convertedBy,\n      format\n    };\n    if (signature != null) {\n      artifacts.signature = signature;\n    }\n    if (userDefinedMetadata != null) {\n      artifacts.userDefinedMetadata = userDefinedMetadata;\n    }\n    const initializer = modelConfig.modelInitializer;\n    if (initializer) {\n      artifacts.modelInitializer = initializer;\n    }\n    return artifacts;\n  }\n  async loadWeights(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n    const fetchURLs = [];\n    const urlPromises = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...(await Promise.all(urlPromises)));\n    }\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\r\n * Extract the prefix and suffix of the url, where the prefix is the path before\r\n * the last file, and suffix is the search params after the last file.\r\n * ```\r\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\r\n * [prefix, suffix] = parseUrl(url)\r\n * // prefix = 'http://tfhub.dev/model/1/'\r\n * // suffix = '?tfjs-format=file'\r\n * ```\r\n * @param url the model url to be parsed.\r\n */\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\r\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\r\n *\r\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\r\n * `path` URL. The form data includes artifacts that represent the topology\r\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\r\n * blobs (files) exist in form-data:\r\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\r\n *   - A binary weights file consisting of the concatenated weight values.\r\n * These files are in the same format as the one generated by\r\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\r\n *\r\n * The following code snippet exemplifies the client-side code that uses this\r\n * function:\r\n *\r\n * ```js\r\n * const model = tf.sequential();\r\n * model.add(\r\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\r\n *\r\n * const saveResult = await model.save(tf.io.http(\r\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\r\n * console.log(saveResult);\r\n * ```\r\n *\r\n * If the default `POST` method is to be used, without any custom parameters\r\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\r\n *\r\n * ```js\r\n * const saveResult = await model.save('http://model-server:5000/upload');\r\n * ```\r\n *\r\n * The following GitHub Gist\r\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\r\n * implements a server based on [flask](https://github.com/pallets/flask) that\r\n * can receive the request. Upon receiving the model artifacts via the requst,\r\n * this particular server reconsistutes instances of [Keras\r\n * Models](https://keras.io/models/model/) in memory.\r\n *\r\n *\r\n * @param path A URL path to the model.\r\n *   Can be an absolute HTTP path (e.g.,\r\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\r\n *   './model-upload').\r\n * @param requestInit Request configurations to be used when sending\r\n *    HTTP request to server using `fetch`. It can contain fields such as\r\n *    `method`, `credentials`, `headers`, `mode`, etc. See\r\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\r\n *    for more information. `requestInit` must not have a body, because the\r\n * body will be set by TensorFlow.js. File blobs representing the model\r\n * topology (filename: 'model.json') and the weights of the model (filename:\r\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\r\n * `body`, an Error will be thrown.\r\n * @param loadOptions Optional configuration for the loading. It includes the\r\n *   following fields:\r\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\r\n *     files, by default this is calculated from the path param.\r\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\r\n *     the `fetch` from node-fetch can be used here.\r\n *   - onProgress Optional, progress callback function, fired periodically\r\n *     before the load is completed.\r\n * @returns An instance of `IOHandler`.\r\n *\r\n * @doc {\r\n *   heading: 'Models',\r\n *   subheading: 'Loading',\r\n *   namespace: 'io',\r\n *   ignoreCI: true\r\n * }\r\n */\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\r\n * Deprecated. Use `tf.io.http`.\r\n * @param path\r\n * @param loadOptions\r\n */\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":null,"metadata":{},"sourceType":"module"}