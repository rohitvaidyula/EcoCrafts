{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n/**\r\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\r\n * allows inserting duplicate value, in which case, the element will be inserted\r\n * at the lowest index of the value.\r\n * @param arr The array to modify.\r\n * @param element The element to insert.\r\n * @param comparator Optional. If no comparator is specified, elements are\r\n * compared using array_util.defaultComparator, which is suitable for Strings\r\n * and Numbers in ascending arrays. If the array contains multiple instances of\r\n * the target value, the left-most instance will be returned. To provide a\r\n * comparator, it should take 2 arguments to compare and return a negative,\r\n * zero, or a positive number.\r\n */\nexport function binaryInsert(arr, element, comparator) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n/**\r\n * Searches the array for the target using binary search, returns the index\r\n * of the found element, or position to insert if element not found. If no\r\n * comparator is specified, elements are compared using array_\r\n * util.defaultComparator, which is suitable for Strings and Numbers in\r\n * ascending arrays. If the array contains multiple instances of the target\r\n * value, the left-most instance will be returned.\r\n * @param arr The array to be searched in.\r\n * @param target The target to be searched for.\r\n * @param comparator Should take 2 arguments to compare and return a negative,\r\n *    zero, or a positive number.\r\n * @return Lowest index of the target value if found, otherwise the insertion\r\n *    point where the target should be inserted, in the form of\r\n *    (-insertionPoint - 1).\r\n */\nexport function binarySearch(arr, target, comparator) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n/**\r\n * Compares its two arguments for order.\r\n * @param a The first element to be compared.\r\n * @param b The second element to be compared.\r\n * @return A negative number, zero, or a positive number as the first\r\n *     argument is less than, equal to, or greater than the second.\r\n */\nfunction defaultComparator(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction binarySearch_(arr, target, comparator) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + (right - left >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n      found = !compareResult;\n    }\n  }\n  return found ? left : -left - 1;\n}","map":null,"metadata":{},"sourceType":"module"}