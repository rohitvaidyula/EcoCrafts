{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n// tslint:disable-next-line:max-line-length\nimport { MaxNorm, MinMaxNorm, NonNeg, UnitNorm } from './constraints';\n/**\r\n * MaxNorm weight constraint.\r\n *\r\n * Constrains the weights incident to each hidden unit\r\n * to have a norm less than or equal to a desired value.\r\n *\r\n * References\r\n *       - [Dropout: A Simple Way to Prevent Neural Networks from Overfitting\r\n * Srivastava, Hinton, et al.\r\n * 2014](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)\r\n *\r\n * @doc {heading: 'Constraints',namespace: 'constraints'}\r\n */\nexport function maxNorm(args) {\n  return new MaxNorm(args);\n}\n/**\r\n * Constrains the weights incident to each hidden unit to have unit norm.\r\n *\r\n * @doc {heading: 'Constraints', namespace: 'constraints'}\r\n */\nexport function unitNorm(args) {\n  return new UnitNorm(args);\n}\n/**\r\n * Constains the weight to be non-negative.\r\n *\r\n * @doc {heading: 'Constraints', namespace: 'constraints'}\r\n */\nexport function nonNeg() {\n  return new NonNeg();\n}\n/** @doc {heading: 'Constraints', namespace: 'constraints'} */\nexport function minMaxNorm(config) {\n  return new MinMaxNorm(config);\n}","map":null,"metadata":{},"sourceType":"module"}