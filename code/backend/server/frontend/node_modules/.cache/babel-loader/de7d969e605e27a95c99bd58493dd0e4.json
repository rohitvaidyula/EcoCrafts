{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n    case 'Where':\n      {\n        const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await tfOps.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n    case 'ListDiff':\n      {\n        return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":null,"metadata":{},"sourceType":"module"}