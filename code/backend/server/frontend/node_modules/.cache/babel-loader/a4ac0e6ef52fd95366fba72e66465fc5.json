{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { env } from './environment';\nimport * as base from './util_base';\nexport * from './util_base';\n/**\r\n * Create typed array for scalar value. Used for storing in `DataStorage`.\r\n */\nexport function createScalarValue(value, dtype) {\n  if (dtype === 'string') {\n    return encodeString(value);\n  }\n  return toTypedArray([value], dtype);\n}\nfunction noConversionNeeded(a, dtype) {\n  return a instanceof Float32Array && dtype === 'float32' || a instanceof Int32Array && dtype === 'int32' || a instanceof Uint8Array && dtype === 'bool';\n}\nexport function toTypedArray(a, dtype) {\n  if (dtype === 'string') {\n    throw new Error('Cannot convert a string[] to a TypedArray');\n  }\n  if (Array.isArray(a)) {\n    a = base.flatten(a);\n  }\n  if (env().getBool('DEBUG')) {\n    base.checkConversionForErrors(a, dtype);\n  }\n  if (noConversionNeeded(a, dtype)) {\n    return a;\n  }\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(a);\n  } else if (dtype === 'int32') {\n    return new Int32Array(a);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array(a.length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round(a[i]) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\r\n * Returns the current high-resolution time in milliseconds relative to an\r\n * arbitrary time in the past. It works across different platforms (node.js,\r\n * browsers).\r\n *\r\n * ```js\r\n * console.log(tf.util.now());\r\n * ```\r\n *\r\n * @doc {heading: 'Util', namespace: 'util'}\r\n */\nexport function now() {\n  return env().platform.now();\n}\n/**\r\n * Returns a platform-specific implementation of\r\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\r\n *\r\n * If `fetch` is defined on the global object (`window`, `process`, etc.),\r\n * `tf.util.fetch` returns that function.\r\n *\r\n * If not, `tf.util.fetch` returns a platform-specific solution.\r\n *\r\n * ```js\r\n * const resource = await tf.util.fetch('https://unpkg.com/@tensorflow/tfjs');\r\n * // handle response\r\n * ```\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function fetch(path, requestInits) {\n  return env().platform.fetch(path, requestInits);\n}\n/**\r\n * Encodes the provided string into bytes using the provided encoding scheme.\r\n *\r\n * @param s The string to encode.\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function encodeString(s, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.encode(s, encoding);\n}\n/**\r\n * Decodes the provided bytes into a string using the provided encoding scheme.\r\n * @param bytes The bytes to decode.\r\n *\r\n * @param encoding The encoding scheme. Defaults to utf-8.\r\n *\r\n * @doc {heading: 'Util'}\r\n */\nexport function decodeString(bytes, encoding = 'utf-8') {\n  encoding = encoding || 'utf-8';\n  return env().platform.decode(bytes, encoding);\n}","map":null,"metadata":{},"sourceType":"module"}