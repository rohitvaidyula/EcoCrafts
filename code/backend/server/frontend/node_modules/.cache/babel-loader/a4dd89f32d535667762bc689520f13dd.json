{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Pow } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes the power of one `tf.Tensor` to another. Supports broadcasting.\r\n *\r\n * Given a `tf.Tensor` x and a `tf.Tensor` y, this operation computes x^y for\r\n * corresponding elements in x and y. The result's dtype will be the upcasted\r\n * type of the `base` and `exp` dtypes.\r\n *\r\n * ```js\r\n * const a = tf.tensor([[2, 3], [4, 5]])\r\n * const b = tf.tensor([[1, 2], [3, 0]]).toInt();\r\n *\r\n * a.pow(b).print();  // or tf.pow(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor([[1, 2], [3, 4]])\r\n * const b = tf.tensor(2).toInt();\r\n *\r\n * a.pow(b).print();  // or tf.pow(a, b)\r\n * ```\r\n * We also expose `powStrict` which has the same signature as this op and\r\n * asserts that `base` and `exp` are the same shape (does not broadcast).\r\n *\r\n * @param base The base `tf.Tensor` to pow element-wise.\r\n * @param exp The exponent `tf.Tensor` to pow element-wise.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\nfunction pow_(base, exp) {\n  let $base = convertToTensor(base, 'base', 'pow');\n  let $exp = convertToTensor(exp, 'exp', 'pow');\n  [$base, $exp] = makeTypesMatch($base, $exp);\n  const inputs = {\n    a: $base,\n    b: $exp\n  };\n  return ENGINE.runKernel(Pow, inputs);\n}\nexport const pow = op({\n  pow_\n});","map":null,"metadata":{},"sourceType":"module"}