{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Multiply } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Multiplies two `tf.Tensor`s element-wise, A * B. Supports broadcasting.\r\n *\r\n * We also expose `tf.mulStrict` which has the same signature as this op and\r\n * asserts that `a` and `b` are the same shape (does not broadcast).\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.tensor1d([2, 3, 4, 5]);\r\n *\r\n * a.mul(b).print();  // or tf.mul(a, b)\r\n * ```\r\n *\r\n * ```js\r\n * // Broadcast mul a with b.\r\n * const a = tf.tensor1d([1, 2, 3, 4]);\r\n * const b = tf.scalar(5);\r\n *\r\n * a.mul(b).print();  // or tf.mul(a, b)\r\n * ```\r\n * @param a The first tensor to multiply.\r\n * @param b The second tensor to multiply. Must have the same dtype as `a`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\r\n */\nfunction mul_(a, b) {\n  let $a = convertToTensor(a, 'a', 'mul');\n  let $b = convertToTensor(b, 'b', 'mul');\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(Multiply, inputs);\n}\nexport const mul = op({\n  mul_\n});","map":null,"metadata":{},"sourceType":"module"}