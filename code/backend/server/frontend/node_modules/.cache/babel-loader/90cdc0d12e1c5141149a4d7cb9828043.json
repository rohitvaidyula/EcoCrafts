{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  assertNotComplex(x, 'transpose');\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n  const values = backend.data.get(x.dataId).values;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {\n    dataId,\n    shape: newShape,\n    dtype: x.dtype\n  };\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose\n};","map":null,"metadata":{},"sourceType":"module"}