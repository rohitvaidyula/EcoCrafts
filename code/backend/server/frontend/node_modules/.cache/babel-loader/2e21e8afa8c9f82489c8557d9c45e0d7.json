{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\r\n * Helper class for lookup inputs and params for nodes in the model graph.\r\n */\nexport class NodeValueImpl {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\r\n   * Return the value of the attribute or input param.\r\n   * @param name String: name of attribute or input param.\r\n   */\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  /**\r\n   * Return the value of the attribute or input param.\r\n   * @param name String: name of attribute or input param.\r\n   */\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n    return defaultValue;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}