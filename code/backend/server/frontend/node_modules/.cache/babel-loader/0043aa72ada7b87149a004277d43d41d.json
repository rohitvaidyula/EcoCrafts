{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { deprecationWarn } from '../globals';\nimport { AvgPool3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Computes the 3D average pooling.\r\n *\r\n * ```js\r\n * const x = tf.tensor5d([1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 2, 2, 1]);\r\n * const result = tf.avgPool3d(x, 2, 1, 'valid');\r\n * result.print();\r\n * ```\r\n *\r\n * @param x The input tensor, of rank 5 or rank 4 of shape\r\n *     `[batch, depth, height, width, inChannels]`.\r\n * @param filterSize The filter size:\r\n *     `[filterDepth, filterHeight, filterWidth]`.\r\n *     If `filterSize` is a single number,\r\n *     then `filterDepth == filterHeight == filterWidth`.\r\n * @param strides The strides of the pooling:\r\n *     `[strideDepth, strideHeight, strideWidth]`.\r\n *     If `strides` is a single number,\r\n *     then `strideDepth == strideHeight == strideWidth`.\r\n * @param pad The type of padding algorithm.\r\n *    - `same` and stride 1: output will be of same size as input,\r\n *       regardless of filter size.\r\n *    - `valid`: output will be smaller than input if filter is larger\r\n *       than 1*1x1.\r\n *    - For more info, see this guide:\r\n *     [https://www.tensorflow.org/api_guides/python/nn#Convolution](\r\n *          https://www.tensorflow.org/api_guides/python/nn#Convolution)\r\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\r\n *     provided, it will default to truncate.\r\n * @param dataFormat An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\r\n *     \"NDHWC\". Specify the data format of the input and output data. With the\r\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\r\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\r\n * @param dilations Deprecated, this field will be gone in v3.0.0.\r\n *     The dilation rates:\r\n *     `[dilationDepth, dilationHeight, dilationWidth]`\r\n *     in which we sample input values across the depth, height and width\r\n *     dimensions in dilated pooling.\r\n *     Defaults to `[1, 1, 1]`. If `dilations` is a single number,\r\n *     then `dilationDepth == dilationHeight == dilationWidth`.\r\n *     If it is greater than 1, then all values of `strides` must be 1.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Convolution'}\r\n */\nfunction avgPool3d_(x, filterSize, strides, pad, dimRoundingMode, dataFormat = 'NDHWC', dilations) {\n  if (dilations == null) {\n    dilations = [1, 1, 1];\n  } else {\n    deprecationWarn('dilations is deprecated, this field will be gone in ' + 'v3.0.0.');\n  }\n  const $x = convertToTensor(x, 'x', 'avgPool3d', 'float32');\n  let x5D = $x;\n  let reshapedTo5D = false;\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(x5D.rank === 5, () => `Error in avgPool3d: x must be rank 5 but got rank ${x5D.rank}.`);\n  util.assert(dataFormat === 'NDHWC', () => `Error in avgPool3d: Only NDHWC is currently supported, ` + `but got dataFormat of ${dataFormat}`);\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool3d: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  if (dimRoundingMode != null) {\n    util.assert(util.isInt(pad), () => `Error in avgPool3d: pad must be an integer when using, ` + `dimRoundingMode ${dimRoundingMode} but got pad ${pad}.`);\n  }\n  const inputs = {\n    x: x5D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat,\n    dilations\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  let res = ENGINE.runKernel(AvgPool3D, inputs, attrs);\n  res = cast(res, x5D.dtype);\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n  return res;\n}\nexport const avgPool3d = op({\n  avgPool3d_\n});","map":null,"metadata":{},"sourceType":"module"}