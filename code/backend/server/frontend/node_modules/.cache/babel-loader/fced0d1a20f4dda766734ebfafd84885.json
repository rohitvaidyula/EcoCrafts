{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../../engine';\nimport { RotateWithOffset } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\r\n * Rotates the input image tensor counter-clockwise with an optional offset\r\n * center of rotation. Currently available in the CPU, WebGL, and WASM backends.\r\n *\r\n * @param image 4d tensor of shape `[batch, imageHeight, imageWidth, depth]`.\r\n * @param radians The amount of rotation.\r\n * @param fillValue The value to fill in the empty space leftover\r\n *     after rotation. Can be either a single grayscale value (0-255), or an\r\n *     array of three numbers `[red, green, blue]` specifying the red, green,\r\n *     and blue channels. Defaults to `0` (black).\r\n * @param center The center of rotation. Can be either a single value (0-1), or\r\n *     an array of two numbers `[centerX, centerY]`. Defaults to `0.5` (rotates\r\n *     the image around its center).\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\r\n */\nfunction rotateWithOffset_(image, radians, fillValue = 0, center = 0.5) {\n  const $image = convertToTensor(image, 'image', 'rotateWithOffset', 'float32');\n  util.assert($image.rank === 4, () => 'Error in rotateWithOffset: image must be rank 4,' + `but got rank ${$image.rank}.`);\n  const inputs = {\n    image: $image\n  };\n  const attrs = {\n    radians,\n    fillValue,\n    center\n  };\n  const res = ENGINE.runKernel(RotateWithOffset, inputs, attrs);\n  return res;\n}\nexport const rotateWithOffset = op({\n  rotateWithOffset_\n});","map":null,"metadata":{},"sourceType":"module"}