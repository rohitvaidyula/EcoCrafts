{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { customGrad } from '../../gradients';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { add } from '../add';\nimport { expandShapeToKeepDim } from '../axis_util';\nimport { cast } from '../cast';\nimport { div } from '../div';\nimport { exp } from '../exp';\nimport { logSumExp } from '../log_sum_exp';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { sum } from '../sum';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\r\n * Computes softmax cross entropy between logits and labels.\r\n *\r\n * Measures the probability error in discrete classification tasks in which\r\n * the classes are mutually exclusive (each entry is in exactly one class).\r\n * For example, each CIFAR-10 image is labeled with one and only one label: an\r\n * image can be a dog or a truck, but not both.\r\n *\r\n * `NOTE`: While the classes are mutually exclusive, their probabilities need\r\n * not be. All that is required is that each row of labels is a valid\r\n * probability distribution. If they are not, the computation of the gradient\r\n * will be incorrect.\r\n *\r\n * `WARNING`: This op expects unscaled logits, since it performs a softmax on\r\n * logits internally for efficiency. Do not call this op with the output of\r\n * softmax, as it will produce incorrect results.\r\n *\r\n * logits and labels must have the same shape, e.g. [batch_size, num_classes]\r\n * and the same dtype.\r\n * @param labels The labels array.\r\n * @param logits The logits array.\r\n * @param dim The dimension softmax would be performed on. Defaults to `-1`\r\n *     which indicates the last dimension.\r\n */\nfunction softmaxCrossEntropyWithLogits_(labels, logits, dim = -1) {\n  if (dim === -1) {\n    dim = logits.rank - 1;\n  }\n  if (dim !== logits.rank - 1) {\n    throw Error(`Softmax cross entropy along a non-last dimension is not yet ` + `supported. Labels / logits was rank ${logits.rank} ` + `and dim was ${dim}`);\n  }\n  // Use a custom gradient for numerical stability.\n  const customOp = customGrad((labels, logits, save) => {\n    // Reference:\n    //   1. http://cs231n.github.io/linear-classify/#softmax\n    //   2. https://blog.feedly.com/tricks-of-the-trade-logsumexp/\n    const keepDims = true;\n    const lse = logSumExp(logits, [dim], keepDims);\n    const logResult = sub(cast(logits, 'float32'), lse);\n    save([labels, logResult]);\n    const costVector = neg(mul(logResult, labels));\n    const value = sum(costVector, [dim]);\n    const gradFunc = (dy, saved) => {\n      const [labels, logResult] = saved;\n      const dyShape = expandShapeToKeepDim(dy.shape, [dim]);\n      return [mul(reshape(dy, dyShape), sub(cast(labels, 'float32'), exp(logResult))), mul(reshape(dy, dyShape), sub(exp(logResult), cast(labels, 'float32')))];\n    };\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp(labels, logits);\n}\n/**\r\n * Computes the softmax cross entropy loss between two tensors.\r\n *\r\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\r\n *\r\n *   newOnehotLabels = onehotLabels * (1 - labelSmoothing)\r\n *                         + labelSmoothing / numClasses\r\n *\r\n * @param onehotLabels One hot encoded labels\r\n *    [batch_size, num_classes], same dimensions as 'predictions'.\r\n * @param logits The predicted outputs.\r\n * @param weights Tensor whose rank is either 0, or 1, and must be\r\n *    broadcastable to `loss`  of shape [batch_size]\r\n * @param labelSmoothing If greater than 0, then smooth the labels.\r\n * @param reduction Type of reduction to apply to loss. Should be of type\r\n *    `Reduction`\r\n *\r\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\r\n */\nfunction softmaxCrossEntropy_(onehotLabels, logits, weights, labelSmoothing = 0, reduction = Reduction.SUM_BY_NONZERO_WEIGHTS) {\n  let $onehotLabels = convertToTensor(onehotLabels, 'onehotLabels', 'softmaxCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'softmaxCrossEntropy');\n  let $weights = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'softmaxCrossEntropy');\n  }\n  assertShapesMatch($onehotLabels.shape, $logits.shape, 'Error in softmaxCrossEntropy: ');\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const numClasses = scalar($onehotLabels.shape[1]);\n    $onehotLabels = add(mul($onehotLabels, sub(one, labelSmoothingScalar)), div(labelSmoothingScalar, numClasses));\n  }\n  const losses = softmaxCrossEntropyWithLogits_($onehotLabels, $logits);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const softmaxCrossEntropy = op({\n  softmaxCrossEntropy_\n});","map":null,"metadata":{},"sourceType":"module"}