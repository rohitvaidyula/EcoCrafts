{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\r\n * Apply a mapping function to a nested structure in a recursive manner.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\r\n *   replacement value for that node (i.e., replacing the subtree), or indicates\r\n *   that the node should be processed recursively.\r\n */\nexport function deepMap(input, mapFn) {\n  return deepMapInternal(input, mapFn);\n}\n/**\r\n * @param seen: A Map of known object mappings (i.e., memoized results of\r\n *   `mapFn()`)\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n  if (input == null) {\n    return null;\n  }\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep map function may not return both a value and recurse=true.');\n  }\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\r\n * Zip nested structures together in a recursive manner.\r\n *\r\n * This has the effect of transposing or pivoting data, e.g. converting it from\r\n * a row-major representation to a column-major representation.\r\n *\r\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\r\n * `{a: [1, 3], b: [2, 4]}`.\r\n *\r\n * The inputs should all have the same nested structure (i.e., of arrays and\r\n * dicts).  The result is a single object with the same nested structure, where\r\n * the leaves are arrays collecting the values of the inputs at that location\r\n * (or, optionally, the result of a custom function applied to those arrays).\r\n *\r\n * @param inputs: An array of the objects to zip together.\r\n * @param zipFn: (optional) A function that expects an array of elements at a\r\n *   single node of the object tree, and returns a `DeepMapResult`.  The\r\n *   `DeepMapResult` either provides a result value for that node (i.e.,\r\n *   representing the subtree), or indicates that the node should be processed\r\n *   recursively.  The default zipFn recurses as far as possible and places\r\n *   arrays at the leaves.\r\n */\nexport function deepZip(inputs, zipFn = zipToList) {\n  return deepZipInternal(inputs, zipFn);\n}\n/**\r\n * @param containedIn: An set containing objects on the reference path currently\r\n *   being processed (used to detect cycles).\r\n */\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep zip function may not return both a value and recurse=true.');\n  }\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n// tslint:disable-next-line:no-any\nexport function zipToList(x) {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n  if (isIterable(x[0])) {\n    return {\n      value: null,\n      recurse: true\n    };\n  } else {\n    return {\n      value: x,\n      recurse: false\n    };\n  }\n}\n/**\r\n * Apply an async mapping function to a nested structure in a recursive manner.\r\n *\r\n * This first creates a nested structure of Promises, and then awaits all of\r\n * those, resulting in a single Promise for a resolved nested structure.\r\n *\r\n * The result of the mapping is an object with the same nested structure (i.e.,\r\n * of arrays and dicts) as the input, except that some subtrees are replaced,\r\n * according to the results of the mapping function.\r\n *\r\n * Mappings are memoized.  Thus, if the nested structure contains the same\r\n * object in multiple positions, the output will contain the same mapped object\r\n * in those positions.  Cycles are not supported, however.\r\n *\r\n * @param input: The object to which to apply the mapping function.\r\n * @param mapFn: A function that expects a single node of the object tree, and\r\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\r\n *   a `Promise` for a replacement value for that node (i.e., replacing the\r\n *   subtree), or indicates that the node should be processed recursively.  Note\r\n *   that the decision whether or not to recurse must be made immediately; only\r\n *   the mapped value may be promised.\r\n */\nexport async function deepMapAndAwaitAll(input, mapFn) {\n  const seen = new Map();\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n/**\r\n * Determine whether the argument is iterable.\r\n *\r\n * @returns true if the argument is an array or any non-Tensor object.\r\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj) {\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof tf.Tensor));\n}\n/**\r\n * Determine whether the argument can be converted to Tensor.\r\n *\r\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\r\n * not.\r\n *\r\n * @returns true if the argument can be converted to Tensor.\r\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof tf.Tensor || tf.util.isTypedArray(obj);\n}\n/**\r\n * Returns true if the given `value` is a primitive type. Otherwise returns\r\n * false. This is equivalant to node util.isPrimitive\r\n */\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object' && typeof value !== 'function';\n}","map":null,"metadata":{},"sourceType":"module"}