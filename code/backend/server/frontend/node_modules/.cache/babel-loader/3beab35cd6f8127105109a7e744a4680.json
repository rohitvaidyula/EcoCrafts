{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Concat } from '../kernel_names';\nimport { convertToTensorArray } from '../tensor_util_env';\nimport { assert } from '../util';\nimport { clone } from './clone';\nimport { op } from './operation';\n/**\r\n * Concatenates a list of `tf.Tensor`s along a given axis.\r\n *\r\n * The tensors ranks and types must match, and their sizes must match in all\r\n * dimensions except `axis`.\r\n *\r\n * Also available are stricter rank-specific methods that assert that\r\n * `tensors` are of the given rank:\r\n *   - `tf.concat1d`\r\n *   - `tf.concat2d`\r\n *   - `tf.concat3d`\r\n *   - `tf.concat4d`\r\n *\r\n * Except `tf.concat1d` (which does not have axis param), all methods have\r\n * same signature as this method.\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * a.concat(b).print();  // or a.concat(b)\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor1d([1, 2]);\r\n * const b = tf.tensor1d([3, 4]);\r\n * const c = tf.tensor1d([5, 6]);\r\n * tf.concat([a, b, c]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([[1, 2], [10, 20]]);\r\n * const b = tf.tensor2d([[3, 4], [30, 40]]);\r\n * const axis = 1;\r\n * tf.concat([a, b], axis).print();\r\n * ```\r\n * @param tensors A list of tensors to concatenate.\r\n * @param axis The axis to concate along. Defaults to 0 (the first dim).\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction concat_(tensors, axis = 0) {\n  assert(tensors.length >= 1, () => 'Pass at least one tensor to concat');\n  const $tensors = convertToTensorArray(tensors, 'tensors', 'concat', 'string_or_numeric');\n  if ($tensors[0].dtype === 'complex64') {\n    $tensors.forEach(tensor => {\n      if (tensor.dtype !== 'complex64') {\n        throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${tensor.dtype}. `);\n      }\n    });\n  }\n  if ($tensors.length === 1) {\n    return clone($tensors[0]);\n  }\n  const inputs = $tensors;\n  const attr = {\n    axis\n  };\n  return ENGINE.runKernel(Concat, inputs, attr);\n}\nexport const concat = op({\n  concat_\n});","map":null,"metadata":{},"sourceType":"module"}