{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\r\n *\r\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\r\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\r\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\r\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\r\n *\r\n * ```js\r\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\r\n *\r\n * a.transpose().print();  // or tf.transpose(a)\r\n * ```\r\n *\r\n * @param x The tensor to transpose.\r\n * @param perm The permutation of the dimensions of a.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Matrices'}\r\n */\nfunction transpose_(x, perm) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);\n  });\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\nexport const transpose = op({\n  transpose_\n});","map":null,"metadata":{},"sourceType":"module"}