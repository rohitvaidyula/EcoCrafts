{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { DepthToSpace } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\r\n * Rearranges data from depth into blocks of spatial data. More specifically,\r\n * this op outputs a copy of the input tensor where values from the `depth`\r\n * dimension are moved in spatial blocks to the `height` and `width` dimensions.\r\n * The attr `blockSize` indicates the input block size and how the data is\r\n * moved.\r\n *\r\n *  - Chunks of data of size `blockSize * blockSize` from depth are rearranged\r\n * into non-overlapping blocks of size `blockSize x blockSize`\r\n *\r\n *  - The width the output tensor is `inputWidth * blockSize`, whereas the\r\n * height is `inputHeight * blockSize`\r\n *\r\n *  - The Y, X coordinates within each block of the output image are determined\r\n * by the high order component of the input channel index\r\n *\r\n *  - The depth of the input tensor must be divisible by `blockSize *\r\n * blockSize`\r\n *\r\n * The `dataFormat` attr specifies the layout of the input and output tensors\r\n * with the following options: \"NHWC\": [ `batch, height, width, channels` ]\r\n * \"NCHW\": [ `batch, channels, height, width` ]\r\n *\r\n * ```js\r\n * const x = tf.tensor4d([1, 2, 3, 4], [1, 1, 1, 4]);\r\n * const blockSize = 2;\r\n * const dataFormat = \"NHWC\";\r\n *\r\n * tf.depthToSpace(x, blockSize, dataFormat).print();\r\n * ```\r\n *\r\n * @param x The input tensor of rank 4\r\n * @param blockSIze  An `int` that is `>= 2`. The size of the spatial block\r\n * @param dataFormat An optional string from: \"NHWC\", \"NCHW\". Defaults to \"NHWC\"\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction depthToSpace_(x, blockSize, dataFormat = 'NHWC') {\n  const $x = convertToTensor(x, 'x', 'depthToSpace');\n  const inputHeight = dataFormat === 'NHWC' ? $x.shape[1] : $x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? $x.shape[2] : $x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? $x.shape[3] : $x.shape[1];\n  util.assert(inputHeight * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputHeight} and ${blockSize}  for depthToSpace with input shape\n    ${$x.shape}`);\n  util.assert(inputWidth * blockSize >= 0, () => `Negative dimension size caused by overflow when multiplying\n    ${inputWidth} and ${blockSize} for depthToSpace with input shape\n        ${$x.shape}`);\n  util.assert(inputDepth % (blockSize * blockSize) === 0, () => `Dimension size must be evenly divisible by ${blockSize * blockSize} but is ${inputDepth} for depthToSpace with input shape ${$x.shape}`);\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    blockSize,\n    dataFormat\n  };\n  return ENGINE.runKernel(DepthToSpace, inputs, attrs);\n}\nexport const depthToSpace = op({\n  depthToSpace_\n});","map":null,"metadata":{},"sourceType":"module"}