{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Multinomial } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\r\n * Creates a `tf.Tensor` with values drawn from a multinomial distribution.\r\n *\r\n * ```js\r\n * const probs = tf.tensor([.75, .25]);\r\n * tf.multinomial(probs, 3).print();\r\n * ```\r\n *\r\n * @param logits 1D array with unnormalized log-probabilities, or\r\n *     2D array of shape `[batchSize, numOutcomes]`. See the `normalized`\r\n *     parameter.\r\n * @param numSamples Number of samples to draw for each row slice.\r\n * @param seed The seed number.\r\n * @param normalized Whether the provided `logits` are normalized true\r\n *     probabilities (sum to 1). Defaults to false.\r\n * @return 1D array of shape `[numSamples]`, or 2D array of shape\r\n *     `[batchSize, numSamples]`, depending on the rank of the input.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Random'}\r\n */\nfunction multinomial_(logits, numSamples, seed, normalized = false) {\n  const $logits = convertToTensor(logits, 'logits', 'multinomial');\n  const numOutcomes = $logits.size;\n  const origRank = $logits.rank;\n  if (numOutcomes < 2) {\n    throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ` + `${numOutcomes}.`);\n  }\n  if (origRank > 2) {\n    throw new Error(`Rank of probabilities must be 1 or 2, but is ${origRank}`);\n  }\n  // TODO(lina128): Investigate correct seed behavior. The code seems not allow\n  // setting see to 0.\n  seed = seed || Math.random();\n  // The kernel only accepts (and returns) rank 2 tensors.\n  const logits2D = origRank === 1 ? reshape($logits, [1, -1]) : $logits;\n  const inputs = {\n    logits: logits2D\n  };\n  const attrs = {\n    numSamples,\n    seed,\n    normalized\n  };\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(Multinomial, inputs, attrs);\n  // tslint:disable-next-line:no-unnecessary-type-assertion\n  return origRank === 1 ? reshape(res, [res.size]) : res;\n}\nexport const multinomial = op({\n  multinomial_\n});","map":null,"metadata":{},"sourceType":"module"}