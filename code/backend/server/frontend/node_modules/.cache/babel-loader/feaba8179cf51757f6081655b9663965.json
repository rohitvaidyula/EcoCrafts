{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google Inc. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { TensorBuffer } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\n/**\r\n * Computes the difference between two lists of numbers.\r\n *\r\n * Given a Tensor `x` and a Tensor `y`, this operation returns a Tensor `out`\r\n * that represents all values that are in `x` but not in `y`. The returned\r\n * Tensor `out` is sorted in the same order that the numbers appear in `x`\r\n * (duplicates are preserved). This operation also returns a Tensor indices that\r\n * represents the position of each out element in `x`. In other words:\r\n *\r\n * `out[i] = x[idx[i]] for i in [0, 1, ..., out.length - 1]`\r\n *\r\n * ```js\r\n * const x = [1, 2, 3, 4, 5, 6];\r\n * const y = [1, 3, 5];\r\n *\r\n * const [out, indices] = await tf.setdiff1dAsync(x, y);\r\n * out.print(); // [2, 4, 6]\r\n * indices.print(); // [1, 3, 5]\r\n * ```\r\n *\r\n * @param x 1-D Tensor. Values to keep.\r\n * @param y 1-D Tensor. Must have the same type as x. Values to exclude in the\r\n *     output.\r\n * @returns Promise of Tensor tuple [out, indices].\r\n *  out: Tensor with the same type as x.\r\n *  indices: A Tensor of type int32.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nasync function setdiff1dAsync_(x, y) {\n  const $x = convertToTensor(x, 'x', 'setdiff1d');\n  const $y = convertToTensor(y, 'y', 'setdiff1d');\n  util.assert($x.dtype === $y.dtype, () => `x and y should have the same dtype, but got x (${$x.dtype}) and y (${$y.dtype}).`);\n  util.assert($x.rank === 1, () => `x should be 1D tensor, but got x (${$x.shape}).`);\n  util.assert($y.rank === 1, () => `y should be 1D tensor, but got y (${$y.shape}).`);\n  const xVals = await $x.data();\n  const yVals = await $y.data();\n  const ySet = new Set(yVals);\n  let outputSize = 0;\n  for (let i = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      outputSize++;\n    }\n  }\n  const buffer = new TensorBuffer([outputSize], $x.dtype);\n  const indices = new TensorBuffer([outputSize], 'int32');\n  for (let i = 0, p = 0; i < xVals.length; i++) {\n    if (!ySet.has(xVals[i])) {\n      buffer.values[p] = xVals[i];\n      indices.values[p] = i;\n      p++;\n    }\n  }\n  return [buffer.toTensor(), indices.toTensor()];\n}\nexport const setdiff1dAsync = setdiff1dAsync_;","map":null,"metadata":{},"sourceType":"module"}