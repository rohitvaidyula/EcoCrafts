{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Prelu } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes leaky rectified linear element-wise with parametric alphas.\r\n *\r\n * `x < 0 ? alpha * x : f(x) = x`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([-1, 2, -3, 4]);\r\n * const alpha = tf.scalar(0.1);\r\n *\r\n * x.prelu(alpha).print();  // or tf.prelu(x, alpha)\r\n * ```\r\n * @param x The input tensor.\r\n * @param alpha Scaling factor for negative values.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Basic math'}\r\n */\nfunction prelu_(x, alpha) {\n  const $x = convertToTensor(x, 'x', 'prelu');\n  const $alpha = convertToTensor(alpha, 'alpha', 'prelu');\n  const inputs = {\n    x: $x,\n    alpha: $alpha\n  };\n  return ENGINE.runKernel(Prelu, inputs);\n}\nexport const prelu = op({\n  prelu_\n});","map":null,"metadata":{},"sourceType":"module"}