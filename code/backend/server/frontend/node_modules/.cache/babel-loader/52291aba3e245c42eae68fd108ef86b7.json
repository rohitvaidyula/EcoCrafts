{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Cumsum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Computes the cumulative sum of a `tf.Tensor` along `axis`.\r\n *\r\n * ```js\r\n * const x = tf.tensor([1, 2, 3, 4]);\r\n * x.cumsum().print();\r\n * ```\r\n * ```js\r\n * const x = tf.tensor([[1, 2], [3, 4]]);\r\n * x.cumsum().print();\r\n * ```\r\n *\r\n * @param x The input tensor to be summed.\r\n * @param axis The axis along which to sum. Optional. Defaults to 0.\r\n * @param exclusive Whether to perform exclusive cumulative sum. Optional.\r\n *     Defaults to false. If set to true then the sum of each tensor entry\r\n *     does not include its own value, but only the values previous to it\r\n *     along the specified axis.\r\n * @param reverse Whether to sum in the opposite direction. Optional.\r\n *     Defaults to false.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Scan'}\r\n */\nfunction cumsum_(x, axis = 0, exclusive = false, reverse = false) {\n  const $x = convertToTensor(x, 'x', 'cumsum');\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    axis,\n    exclusive,\n    reverse\n  };\n  return ENGINE.runKernel(Cumsum, inputs, attrs);\n}\nexport const cumsum = op({\n  cumsum_\n});","map":null,"metadata":{},"sourceType":"module"}