{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { matMul } from './mat_mul';\nimport { oneHot } from './one_hot';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\r\n * Computes the confusion matrix from true labels and predicted labels.\r\n *\r\n * ```js\r\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\r\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\r\n * const numClasses = 3;\r\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\r\n * out.print();\r\n * // Expected output matrix:\r\n * // [[2, 0, 0],\r\n * //  [0, 1, 1],\r\n * //  [0, 0, 1]]\r\n * ```\r\n *\r\n * @param labels The target labels, assumed to be 0-based integers\r\n *   for the classes. The shape is `[numExamples]`, where\r\n *   `numExamples` is the number of examples included.\r\n * @param predictions The predicted classes, assumed to be\r\n *   0-based integers for the classes. Must have the same shape as `labels`.\r\n * @param numClasses Number of all classes, as an integer.\r\n *   Its value must be larger than the largest element in `labels` and\r\n *   `predictions`.\r\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\r\n *   row `r` and column `c` is the number of times examples of actual class\r\n *   `r` were predicted as class `c`.\r\n *\r\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\r\n */\nexport function confusionMatrix_(labels, predictions, numClasses) {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');\n  util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);\n  util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);\n  util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);\n  util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` + `${numClasses}`);\n  // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n  const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses);\n  const oneHotPredictions = oneHot(cast($predictions, 'int32'), numClasses);\n  const oneHotLabelsT = transpose(oneHotLabels);\n  const product = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, 'int32');\n}\nexport const confusionMatrix = op({\n  confusionMatrix_\n});","map":null,"metadata":{},"sourceType":"module"}