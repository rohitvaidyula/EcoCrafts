{"ast":null,"code":"import { useCallback, useState } from 'react';\n\n/**\r\n * Updates state, partial updates are merged into existing state values\r\n */\n\n/**\r\n * Mimics a React class component's state model, of having a single unified\r\n * `state` object and an updater that merges updates into the existing state, as\r\n * opposed to replacing it.\r\n *\r\n * ```js\r\n * const [state, setState] = useMergeState({ name: 'Betsy', age: 24 })\r\n *\r\n * setState({ name: 'Johan' }) // { name: 'Johan', age: 24 }\r\n *\r\n * setState(state => ({ age: state.age + 10 })) // { name: 'Johan', age: 34 }\r\n * ```\r\n *\r\n * @param initialState The initial state object\r\n */\nexport default function useMergeState(initialState) {\n  const [state, setState] = useState(initialState);\n  const updater = useCallback(update => {\n    if (update === null) return;\n    if (typeof update === 'function') {\n      setState(state => {\n        const nextState = update(state);\n        return nextState == null ? state : Object.assign({}, state, nextState);\n      });\n    } else {\n      setState(state => Object.assign({}, state, update));\n    }\n  }, [setState]);\n  return [state, updater];\n}","map":null,"metadata":{},"sourceType":"module"}