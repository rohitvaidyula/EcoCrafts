{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\r\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\r\n * chunks.\r\n */\nexport class FileDataSource extends DataSource {\n  /**\r\n   * Create a `FileDataSource`.\r\n   *\r\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\r\n   *     read. Local file only works in node environment.\r\n   * @param options Options passed to the underlying `FileChunkIterator`s,\r\n   *   such as {chunksize: 1024}.\r\n   */\n  constructor(input, options = {}) {\n    super();\n    this.input = input;\n    this.options = options;\n  }\n  async iterator() {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n      this.input = fs.readFileSync(this.input.substr(7));\n    }\n    // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n    return new FileChunkIterator(this.input, this.options);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}