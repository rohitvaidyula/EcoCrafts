{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\n/**\r\n * Gets the new shape of the input Tensor after it's been reshaped\r\n * to:\r\n * [blockShape[0], ..., blockShape[M-1], batch / prod(blockShape),\r\n * inputShape[1], ..., inputShape[N-1]]\r\n *\r\n * See step 1: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */\nexport function getReshaped(inputShape, blockShape, prod, batchToSpace = true) {\n  let reshaped = [];\n  if (batchToSpace) {\n    reshaped = reshaped.concat(blockShape.slice(0));\n    reshaped.push(inputShape[0] / prod);\n    reshaped = reshaped.concat(inputShape.slice(1));\n  } else {\n    reshaped = reshaped.concat(inputShape[0]);\n    const spatialLength = blockShape.length;\n    for (let i = 0; i < spatialLength; ++i) {\n      reshaped = reshaped.concat([inputShape[i + 1] / blockShape[i], blockShape[i]]);\n    }\n    reshaped = reshaped.concat(inputShape.slice(spatialLength + 1));\n  }\n  return reshaped;\n}\n/**\r\n * Gets the permutation that will transpose the dimensions of the\r\n * reshaped tensor to shape:\r\n *\r\n * [batch / prod(block_shape),inputShape[1], blockShape[0], ...,\r\n * inputShape[M], blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * see step 2: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */\nexport function getPermuted(reshapedRank, blockShapeRank, batchToSpace = true) {\n  const permuted = [];\n  if (batchToSpace) {\n    permuted.push(blockShapeRank);\n    for (let i = blockShapeRank + 1; i < reshapedRank; ++i) {\n      if (i <= 2 * blockShapeRank) {\n        permuted.push(i);\n        permuted.push(i - (blockShapeRank + 1));\n      } else {\n        permuted.push(i);\n      }\n    }\n  } else {\n    const permutedBeforeBatch = [];\n    const permutedAfterBatch = [];\n    for (let i = 1; i < reshapedRank; ++i) {\n      if (i >= blockShapeRank * 2 + 1 || i % 2 === 1) {\n        permutedAfterBatch.push(i);\n      } else {\n        permutedBeforeBatch.push(i);\n      }\n    }\n    permuted.push(...permutedBeforeBatch);\n    permuted.push(0);\n    permuted.push(...permutedAfterBatch);\n  }\n  return permuted;\n}\n/**\r\n * Gets the shape of the reshaped and permuted input Tensor before any cropping\r\n * is applied.  The new shape will be:\r\n *\r\n * [batch / prod(blockShape),inputShape[1] * blockShape[0], ...,\r\n * inputShape[M] * blockShape[M-1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * See step 3: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */\nexport function getReshapedPermuted(inputShape, blockShape, prod, batchToSpace = true) {\n  const reshapedPermuted = [];\n  if (batchToSpace) {\n    reshapedPermuted.push(inputShape[0] / prod);\n  } else {\n    reshapedPermuted.push(inputShape[0] * prod);\n  }\n  for (let i = 1; i < inputShape.length; ++i) {\n    if (i <= blockShape.length) {\n      if (batchToSpace) {\n        reshapedPermuted.push(blockShape[i - 1] * inputShape[i]);\n      } else {\n        reshapedPermuted.push(inputShape[i] / blockShape[i - 1]);\n      }\n    } else {\n      reshapedPermuted.push(inputShape[i]);\n    }\n  }\n  return reshapedPermuted;\n}\n/**\r\n * Converts the crops argument into the beginning coordinates of a slice\r\n * operation.\r\n */\nexport function getSliceBeginCoords(crops, blockShape) {\n  const sliceBeginCoords = [0];\n  for (let i = 0; i < blockShape; ++i) {\n    sliceBeginCoords.push(crops[i][0]);\n  }\n  return sliceBeginCoords;\n}\n/**\r\n * Converts the crops argument into the size of a slice operation.  When\r\n * combined with getSliceBeginCoords this function allows the reshaped and\r\n * permuted Tensor to be cropped to its final output shape of:\r\n *\r\n * inputShape[1] * blockShape[0] - crops[0,0] - crops[0,1], ...,\r\n * inputShape[M] * blockShape[M-1] -crops[M-1,0] -\r\n * crops[M-1,1],inputShape[M+1], ..., inputShape[N-1]]\r\n *\r\n * See step 4: https://www.tensorflow.org/api_docs/python/tf/batch_to_space_nd\r\n */\nexport function getSliceSize(uncroppedShape, crops, blockShape) {\n  const sliceSize = uncroppedShape.slice(0, 1);\n  for (let i = 0; i < blockShape; ++i) {\n    sliceSize.push(uncroppedShape[i + 1] - crops[i][0] - crops[i][1]);\n  }\n  return sliceSize;\n}","map":null,"metadata":{},"sourceType":"module"}