{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { Slice } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Extracts a slice from a `tf.Tensor` starting at coordinates `begin`\r\n * and is of size `size`.\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `x` is of the given rank:\r\n *   - `tf.slice1d`\r\n *   - `tf.slice2d`\r\n *   - `tf.slice3d`\r\n *   - `tf.slice4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n *\r\n * x.slice([1], [2]).print();\r\n * ```\r\n *\r\n * ```js\r\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\r\n *\r\n * x.slice([1, 0], [1, 2]).print();\r\n * ```\r\n * @param x The input `tf.Tensor` to slice from.\r\n * @param begin The coordinates to start the slice from. The length can be\r\n *     less than the rank of x - the rest of the axes will have implicit 0 as\r\n *     start. Can also be a single number, in which case it specifies the\r\n *     first axis.\r\n * @param size The size of the slice. The length can be less than the rank of\r\n *     x - the rest of the axes will have implicit -1. A value of -1 requests\r\n *     the rest of the dimensions in the axis. Can also be a single number,\r\n *     in which case it specifies the size of the first axis.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\r\n */\nfunction slice_(x, begin, size) {\n  const $x = convertToTensor(x, 'x', 'slice', 'string_or_numeric');\n  if ($x.rank === 0) {\n    throw new Error('Slicing scalar is not possible');\n  }\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    begin,\n    size\n  };\n  return ENGINE.runKernel(Slice, inputs, attrs);\n}\nexport const slice = op({\n  slice_\n});","map":null,"metadata":{},"sourceType":"module"}