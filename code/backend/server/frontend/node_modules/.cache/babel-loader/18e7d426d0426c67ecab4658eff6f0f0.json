{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n  util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const xValues = backend.data.get(x.dataId).values;\n  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = h % blockSize;\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = w % blockSize;\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":null,"metadata":{},"sourceType":"module"}