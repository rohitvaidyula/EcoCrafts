{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { PadV2 } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Pads a `tf.Tensor` with a given value and paddings.\r\n *\r\n * This operation implements `CONSTANT` mode. For `REFLECT` and `SYMMETRIC`,\r\n * refer to `tf.mirrorPad`\r\n *\r\n * Also available are stricter rank-specific methods with the same signature\r\n * as this method that assert that `paddings` is of given length.\r\n *   - `tf.pad1d`\r\n *   - `tf.pad2d`\r\n *   - `tf.pad3d`\r\n *   - `tf.pad4d`\r\n *\r\n * ```js\r\n * const x = tf.tensor1d([1, 2, 3, 4]);\r\n * x.pad([[1, 2]]).print();\r\n * ```\r\n * @param x The tensor to pad.\r\n * @param paddings An array of length `R` (the rank of the tensor), where\r\n * each element is a length-2 tuple of ints `[padBefore, padAfter]`,\r\n * specifying how much to pad along each dimension of the tensor.\r\n * @param constantValue The pad value to use. Defaults to 0.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\r\n */\nfunction pad_(x, paddings, constantValue = 0) {\n  const $x = convertToTensor(x, 'x', 'pad');\n  if ($x.rank === 0) {\n    throw new Error('pad(scalar) is not defined. Pass non-scalar to pad');\n  }\n  const attrs = {\n    paddings,\n    constantValue\n  };\n  const inputs = {\n    x: $x\n  };\n  return ENGINE.runKernel(PadV2, inputs, attrs);\n}\nexport const pad = op({\n  pad_\n});","map":null,"metadata":{},"sourceType":"module"}