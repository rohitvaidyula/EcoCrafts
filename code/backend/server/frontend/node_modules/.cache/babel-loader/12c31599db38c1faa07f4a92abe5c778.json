{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Use of this source code is governed by an MIT-style\r\n * license that can be found in the LICENSE file or at\r\n * https://opensource.org/licenses/MIT.\r\n * =============================================================================\r\n */\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute, FeedDict } from './executor';\nimport { evaluateDataset, fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\r\n * Helper function for polymorphic input data: 1. singleton Tensor.\r\n */\nexport function isDataTensor(x) {\n  return x instanceof Tensor;\n}\n/**\r\n * Helper function for polymorphic input data: 2. Array of Tensor.\r\n */\nexport function isDataArray(x) {\n  return Array.isArray(x);\n}\n/**\r\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\r\n */\nexport function isDataDict(x) {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n/**\r\n * Normalizes inputs and targets provided by users.\r\n * @param data User-provided input data (polymorphic).\r\n * @param names An Array of expected Tensor names.\r\n * @param shapes Optional Array of expected Tensor shapes.\r\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\r\n *   match  the expected value found in `shapes`.\r\n * @param exceptionPrefix String prefix used for exception formatting.\r\n * @returns List of standardized input Tensors (one Tensor per model input).\r\n * @throws ValueError: in case of improperly formatted user data.\r\n */\nexport function standardizeInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && data.length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` + `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n  let arrays;\n  if (isDataDict(data)) {\n    data = data;\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ` + `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data;\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `model expected. Expected to see ${names.length} Tensor(s), but ` + `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data;\n    if (names.length > 1) {\n      throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` + `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n    }\n    arrays = [data];\n  }\n  arrays = ensureTensorsRank2OrHigher(arrays);\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s). but got array with ` + `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have shape [${shapes[i]}], but got array with shape ` + `[${array.shape}].`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n/**\r\n * User input validation for Tensors.\r\n * @param inputs `Array` of `tf.Tensor`s for inputs.\r\n * @param targets `Array` of `tf.Tensor`s for targets.\r\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\r\n * @throws ValueError: in case of incorrectly formatted data.\r\n */\nexport function checkArrayLengths(inputs, targets, weights) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(`All input Tensors (x) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(`All target Tensors (y) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(`Input Tensors should have the same number of samples as target ` + `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` + `sample(s).`);\n  }\n}\n/**\r\n * Validation on the compatibility of targes and loss functions.\r\n *\r\n * This helps prevent users from using loss functions incorrectly.\r\n *\r\n * @param targets `Array` of `tf.Tensor`s of targets.\r\n * @param lossFns `Array` of loss functions.\r\n * @param outputShapes `Array` of shapes of model outputs.\r\n */\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [losses.meanSquaredError, losses.binaryCrossentropy, losses.categoricalCrossentropy];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(`You are passing a target array of shape ${y.shape} while using ` + `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` + `expects targets to be binary matrices (1s and 0s) of shape ` + `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an ` + `output of shape ${shape}, while using a loss function that ` + `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n/**\r\n * Check inputs provided by the user.\r\n *\r\n * Porting Note: This corresponds to _standardize_input_data() in Python\r\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\r\n *   the data. Specifically:\r\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\r\n *      example. We don't need to worry about that here because there is no\r\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\r\n *      If one becomes available in the future, we can add support.\r\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\r\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\r\n * may add support for `Object` data inputs in the future when the need\r\n * arises.\r\n *\r\n * Instead, we perform basic checks for number of parameters and shapes.\r\n *\r\n * @param data: The input data.\r\n * @param names: Name for the inputs, from the model.\r\n * @param shapes: Expected shapes for the input data, from the model.\r\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\r\n *   first dimension) will be checked for matching.\r\n * @param exceptionPrefix: Execption prefix message, used in generating error\r\n *   messages.\r\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\r\n */\nfunction checkInputData(data, names, shapes, checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays;\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `the model expected. Expected to see ${names.length} Tensor(s),` + ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` + `but only received one Tensor. Found: array with shape ` + `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s), but got array with ` + `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(`Error when checking ${exceptionPrefix}: expected ` + `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` + `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n/**\r\n * Maps metric functions to model outputs.\r\n * @param metrics An shortcut strings name, metric function, `Array` or dict\r\n *   (`Object`) of metric functions.\r\n * @param outputNames An `Array` of the names of model outputs.\r\n * @returns An `Array` (one entry per model output) of `Array` of metric\r\n *   functions. For instance, if the model has 2 outputs, and for the first\r\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\r\n *   and just `binaryAccuracy` for the second output, the `Array` would look\r\n *   like:\r\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\r\n * @throws TypeError: incompatible metrics format.\r\n */\nexport function collectMetrics(metrics, outputNames) {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n  let wrappedMetrics;\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics;\n  } else {\n    throw new TypeError('Type of metrics argument not understood. Expected an string,' + `function, Array, or Object, found: ${metrics}`);\n  }\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(name => wrappedMetrics);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics = [];\n    for (const name of outputNames) {\n      let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\r\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\r\n * for training, evaluation, prediction and saving.\r\n *\r\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\r\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\r\n *\r\n * See also:\r\n *   `tf.Sequential`, `tf.loadLayersModel`.\r\n *\r\n * @doc {heading: 'Models', subheading: 'Classes'}\r\n */\nexport class LayersModel extends Container {\n  constructor(args) {\n    super(args);\n    this.isTraining = false;\n  }\n  /**\r\n   * Print a text summary of the model's layers.\r\n   *\r\n   * The summary includes\r\n   * - Name and type of all layers that comprise the model.\r\n   * - Output shape(s) of the layers\r\n   * - Number of weight parameters of each layer\r\n   * - If the model has non-sequential-like topology, the inputs each layer\r\n   *   receives\r\n   * - The total number of trainable and non-trainable parameters of the model.\r\n   *\r\n   * ```js\r\n   * const input1 = tf.input({shape: [10]});\r\n   * const input2 = tf.input({shape: [20]});\r\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\r\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\r\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\r\n   * const output =\r\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\r\n   *\r\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\r\n   * model.summary();\r\n   * ```\r\n   *\r\n   * @param lineLength Custom line length, in number of characters.\r\n   * @param positions Custom widths of each of the columns, as either\r\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\r\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\r\n   *   right-most (i.e., ending) position of a column.\r\n   * @param printFn Custom print function. Can be used to replace the default\r\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\r\n   *   messages in the console.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  summary(lineLength, positions, printFn = console.log) {\n    if (!this.built) {\n      throw new ValueError(`This model has never been called, thus its weights have not been ` + `created yet. So no summary can be displayed. Build the model ` + `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n  /**\r\n   * Configures and prepares the model for training and evaluation.  Compiling\r\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\r\n   * or `evaluate` on an un-compiled model will throw an error.\r\n   *\r\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\r\n   * metrics to be used for fitting and evaluating this model.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  compile(args) {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n    // Prepare loss functions.\n    let lossFunctions = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' && typeof args.loss !== 'function') {\n      args.loss = args.loss;\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". ` + `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` + `this was done on purpose, and we will not be expecting data ` + `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(`When passing an Array as loss, it should have one entry per ` + `model output. The model has ${this.outputs.length} output(s), ` + `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n    this.lossFunctions = lossFunctions;\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices = [];\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n    /**\r\n     * Helper function used in loop below.\r\n     */\n    const appendMetric = (outputIndex, metricName, metricTensor) => {\n      if (this.outputNames.length > 1) {\n        metricName = this.outputNames[outputIndex] + '_' + metricName;\n      }\n      this.metricsNames.push(metricName);\n      this.metricsTensors.push([metricTensor, outputIndex]);\n    };\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = metrics => {\n          const metricNamePrefix = '';\n          let metricName;\n          let accFn;\n          let weightedMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n          for (const metric of metrics) {\n            if (typeof metric === 'string' && ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {\n              const outputShape = this.internalOutputShapes[i];\n              if (outputShape[outputShape.length - 1] === 1 || this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (this.lossFunctions[i] === losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName = metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            }\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n  /**\r\n   * Check trainable weights count consistency.\r\n   *\r\n   * This will raise a warning if `this.trainableWeights` and\r\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\r\n   * numbers of parameters).\r\n   * Inconsistency will typically arise when one modifies `model.trainable`\r\n   * without calling `model.compile()` again.\r\n   */\n  checkTrainableWeightsConsistency() {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {\n      console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');\n    }\n  }\n  /**\r\n   * Returns the loss value & metrics values for the model in test mode.\r\n   *\r\n   * Loss and metrics are specified during `compile()`, which needs to happen\r\n   * before calls to `evaluate()`.\r\n   *\r\n   * Computation is done in batches.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential({\r\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n   * });\r\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n   * const result = model.evaluate(\r\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\r\n   * result.print();\r\n   * ```\r\n   *\r\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\r\n   * model has multiple inputs.\r\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\r\n   * model has multiple outputs.\r\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\r\n   *\r\n   * @return `Scalar` test loss (if the model has a single output and no\r\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\r\n   *   and/or metrics). The attribute `model.metricsNames`\r\n   *   will give you the display labels for the scalar outputs.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  evaluate(x, y, args = {}) {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const checkBatchAxis = true;\n    const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\r\n   * Evaluate model using a dataset object.\r\n   *\r\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\r\n   *\r\n   * @param dataset A dataset object. Its `iterator()` method is expected\r\n   *   to generate a dataset iterator object, the `next()` method of which\r\n   *   is expected to produce data batches for evaluation. The return value\r\n   *   of the `next()` call ought to contain a boolean `done` field and a\r\n   *   `value` field. The `value` field is expected to be an array of two\r\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\r\n   *   case is for models with exactly one input and one output (e.g..\r\n   *   a sequential model). The latter case is for models with multiple\r\n   *   inputs and/or multiple outputs. Of the two items in the array, the\r\n   *   first is the input feature(s) and the second is the output target(s).\r\n   * @param args A configuration object for the dataset-based evaluation.\r\n   * @returns Loss and metric values as an Array of `Scalar` objects.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  async evaluateDataset(dataset, args) {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n  /**\r\n   * Get number of samples provided for training, evaluation or prediction.\r\n   *\r\n   * @param ins Input `tf.Tensor`.\r\n   * @param batchSize Integer batch size, optional.\r\n   * @param steps Total number of steps (batches of samples) before\r\n   * declaring loop finished. Optional.\r\n   * @param stepsName The public API's parameter name for `steps`.\r\n   * @returns Number of samples provided.\r\n   */\n  checkNumSamples(ins, batchSize, steps, stepsName = 'steps') {\n    let numSamples;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` + `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(`Either the input data should have a defined shape, or ` + `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n  /**\r\n   * Execute internal tensors of the model with input data feed.\r\n   * @param inputs Input data feed. Must match the inputs of the model.\r\n   * @param outputs Names of the output tensors to be fetched. Must match\r\n   *   names of the SymbolicTensors that belong to the graph.\r\n   * @returns Fetched values for `outputs`.\r\n   */\n  execute(inputs, outputs) {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n    }\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames = outputsIsArray ? outputs : [outputs];\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(`The number of inputs provided (${inputs.length}) ` + `does not match the number of inputs of this model ` + `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(`No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict);\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n  /**\r\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\r\n   */\n  retrieveSymbolicTensors(symbolicTensorNames) {\n    const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n    if (outputsRemaining > 0) {\n      const remainingNames = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(`Cannot find SymbolicTensors for output name(s): ` + `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n  /**\r\n   * Helper method to loop over some data in batches.\r\n   *\r\n   * Porting Note: Not using the functional approach in the Python equivalent\r\n   *   due to the imperative backend.\r\n   * Porting Note: Does not support step mode currently.\r\n   *\r\n   * @param ins: input data\r\n   * @param batchSize: integer batch size.\r\n   * @param verbose: verbosity model\r\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\r\n   *   `tf.Tensor` (if multipe outputs).\r\n   */\n  predictLoop(ins, batchSize = 32, verbose = false) {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n      }\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches = this.outputs.map(output => []);\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({\n                key: this.inputs[i],\n                value: insBatch[i]\n              });\n            }\n          } else {\n            feeds.push({\n              key: this.inputs[0],\n              value: insBatch\n            });\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict);\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n  /**\r\n   * Generates output predictions for the input samples.\r\n   *\r\n   * Computation is done in batches.\r\n   *\r\n   * Note: the \"step\" mode of predict() is currently not supported.\r\n   *   This is because the TensorFlow.js core backend is imperative only.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential({\r\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n   * });\r\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\r\n   * ```\r\n   *\r\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\r\n   *   the model has multiple inputs.\r\n   * @param args A `ModelPredictArgs` object containing optional fields.\r\n   *\r\n   * @return Prediction results as a `tf.Tensor`(s).\r\n   *\r\n   * @exception ValueError In case of mismatch between the provided input data\r\n   *   and the model's expectations, or in case a stateful model receives a\r\n   *   number of samples that is not a multiple of the batch size.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  predict(x, args = {}) {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n  /**\r\n   * Returns predictions for a single batch of samples.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential({\r\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n   * });\r\n   * model.predictOnBatch(tf.ones([8, 10])).print();\r\n   * ```\r\n   * @param x: Input samples, as a Tensor (for models with exactly one\r\n   *   input) or an array of Tensors (for models with more than one input).\r\n   * @return Tensor(s) of predictions\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  predictOnBatch(x) {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n  standardizeUserDataXY(x, y, checkBatchAxis = true, batchSize) {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError('You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileArgs).');\n    }\n    const outputShapes = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target');\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(`In a stateful network, you should only pass inputs with a ` + `number of samples that is divisible by the batch size ` + `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n  async standardizeUserData(x, y, sampleWeight, classWeight, checkBatchAxis = true, batchSize) {\n    const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    // TODO(cais): Handle sampleWeights.\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n    let standardSampleWeights = null;\n    if (classWeight != null) {\n      const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n  /**\r\n   * Loop over some test data in batches.\r\n   * @param f A Function returning a list of tensors.\r\n   * @param ins Array of tensors to be fed to `f`.\r\n   * @param batchSize Integer batch size or `null` / `undefined`.\r\n   * @param verbose verbosity mode.\r\n   * @param steps Total number of steps (batches of samples) before\r\n   * declaring test finished. Ignored with the default value of `null` /\r\n   * `undefined`.\r\n   * @returns Array of Scalars.\r\n   */\n  testLoop(f, ins, batchSize, verbose = 0, steps) {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart);\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] = tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n  getDedupedMetricsNames() {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n  /**\r\n   * Creates a function that performs the following actions:\r\n   *\r\n   * 1. computes the losses\r\n   * 2. sums them to get the total loss\r\n   * 3. call the optimizer computes the gradients of the LayersModel's\r\n   *    trainable weights w.r.t. the total loss and update the variables\r\n   * 4. calculates the metrics\r\n   * 5. returns the values of the losses and metrics.\r\n   */\n  makeTrainFunction() {\n    return data => {\n      const lossValues = [];\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n      const metricsValues = [];\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({\n            key: this.inputs[i],\n            value: inputs[i]\n          });\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict, {\n          'training': true\n        });\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n        let totalLoss;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          }\n          // TODO(cais): push Scalar instead.\n          const meanLoss = tfc.mean(loss);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric;\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n          tfc.keep(weightedMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(weightedMetric);\n        }\n        totalLoss = tfc.mean(totalLoss);\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n        return totalLoss;\n      };\n      const variables = this.collectedTrainableWeights.map(param => param.read());\n      const returnCost = true;\n      const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n  /**\r\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\r\n   * batch of inputs, returns the prespecified loss and metrics of the model\r\n   * under the batch of input data.\r\n   */\n  makeTestFunction() {\n    this.testFunction = data => {\n      return tfc.tidy(() => {\n        const valOutputs = [];\n        let totalLoss;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({\n            key: this.inputs[i],\n            value: inputs[i]\n          });\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict);\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss = tfc.mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric);\n        }\n        return valOutputs;\n      });\n    };\n  }\n  /**\r\n   * Trains the model for a fixed number of epochs (iterations on a\r\n   * dataset).\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential({\r\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\r\n   * });\r\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\r\n   * for (let i = 1; i < 5 ; ++i) {\r\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\r\n   *       batchSize: 4,\r\n   *       epochs: 3\r\n   *   });\r\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\r\n   * }\r\n   * ```\r\n   *\r\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\r\n   * model has multiple inputs. If all inputs in the model are named, you\r\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\r\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\r\n   * the model has multiple outputs. If all outputs in the model are named,\r\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\r\n   * @param args A `ModelFitArgs`, containing optional fields.\r\n   *\r\n   * @return A `History` instance. Its `history` attribute contains all\r\n   *   information collected during training.\r\n   *\r\n   * @exception ValueError In case of mismatch between the provided input\r\n   * data and what the model expects.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  async fit(x, y, args = {}) {\n    return fitTensors(this, x, y, args);\n  }\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\r\n   * Trains the model using a dataset object.\r\n   *\r\n   * @param dataset A dataset object. Its `iterator()` method is expected\r\n   *   to generate a dataset iterator object, the `next()` method of which\r\n   *   is expected to produce data batches for training. The return value\r\n   *   of the `next()` call ought to contain a boolean `done` field and a\r\n   *   `value` field. The `value` field is expected to be an array of two\r\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\r\n   *   case is for models with exactly one input and one output (e.g..\r\n   *   a sequential model). The latter case is for models with multiple\r\n   *   inputs and/or multiple outputs.\r\n   *   Of the two items in the array, the first is the input feature(s) and\r\n   *   the second is the output target(s).\r\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\r\n   *\r\n   * @return A `History` instance. Its `history` attribute contains all\r\n   *   information collected during training.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  async fitDataset(dataset, args) {\n    return fitDataset(this, dataset, args);\n  }\n  /**\r\n   * Runs a single gradient update on a single batch of data.\r\n   *\r\n   * This method differs from `fit()` and `fitDataset()` in the following\r\n   * regards:\r\n   *   - It operates on exactly one batch of data.\r\n   *   - It returns only the loss and matric values, instead of\r\n   *     returning the batch-by-batch loss and metric values.\r\n   *   - It doesn't support fine-grained options such as verbosity and\r\n   *     callbacks.\r\n   *\r\n   * @param x Input data. It could be one of the following:\r\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\r\n   *     multiple inputs).\r\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\r\n   *     model has named inputs).\r\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\r\n   *   `tf.Tensor`s. It should be consistent with `x`.\r\n   * @returns Training loss or losses (in case the model has\r\n   *   multiple outputs), along with metrics (if any), as numbers.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes'}\r\n   */\n  async trainOnBatch(x, y) {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues = [];\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    tfc.dispose(losses);\n    return singletonOrArray(lossValues);\n  }\n  /**\r\n   * Extract weight values of the model.\r\n   *\r\n   * @param config: An instance of `io.SaveConfig`, which specifies\r\n   * model-saving options such as whether only trainable weights are to be\r\n   * saved.\r\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\r\n   *   non-uniqueified weight names) to their values.\r\n   */\n  getNamedWeights(config) {\n    const namedWeights = [];\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights.push({\n        name: weights[i].originalName,\n        tensor: weightValues[i]\n      });\n    }\n    return namedWeights;\n  }\n  /**\r\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\r\n   *\r\n   * Example:\r\n   *\r\n   * ```js\r\n   * const input = tf.input({shape: [10]});\r\n   * const output = tf.layers.dense({units: 1}).apply(input);\r\n   * const model = tf.model({inputs: [input], outputs: [output]});\r\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\r\n   * const xs = tf.ones([8, 10]);\r\n   * const ys = tf.zeros([8, 1]);\r\n   *\r\n   * const history = await model.fit(xs, ys, {\r\n   *   epochs: 10,\r\n   *   callbacks: {\r\n   *     onEpochEnd: async (epoch, logs) => {\r\n   *       if (epoch === 2) {\r\n   *         model.stopTraining = true;\r\n   *       }\r\n   *     }\r\n   *   }\r\n   * });\r\n   *\r\n   * // There should be only 3 values in the loss array, instead of 10\r\n   * values,\r\n   * // due to the stopping after 3 epochs.\r\n   * console.log(history.history.loss);\r\n   * ```\r\n   */\n  set stopTraining(stop) {\n    this.stopTraining_ = stop;\n  }\n  get stopTraining() {\n    return this.stopTraining_;\n  }\n  get optimizer() {\n    return this.optimizer_;\n  }\n  set optimizer(optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n  dispose() {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n    return result;\n  }\n  getLossIdentifiers() {\n    let lossNames;\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss);\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n      lossNames = this.loss.map(name => toSnakeCase(name));\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {};\n      const losses = this.loss;\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] = toSnakeCase(losses[outputName]);\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n    return lossNames;\n  }\n  getMetricIdentifiers() {\n    if (typeof this.metrics === 'string' || typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] = toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n  getTrainingConfig() {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      }\n    };\n    // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n    const optimizer = deserialize(tsConfig);\n    let loss;\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]);\n      }\n    }\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n    this.compile({\n      loss,\n      metrics,\n      optimizer\n    });\n  }\n  /**\r\n   * Save the configuration and/or weights of the LayersModel.\r\n   *\r\n   * An `IOHandler` is an object that has a `save` method of the proper\r\n   * signature defined. The `save` method manages the storing or\r\n   * transmission of serialized data (\"artifacts\") that represent the\r\n   * model's topology and weights onto or via a specific medium, such as\r\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\r\n   * requests to a server. TensorFlow.js provides `IOHandler`\r\n   * implementations for a number of frequently used saving mediums, such as\r\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\r\n   * for more details.\r\n   *\r\n   * This method also allows you to refer to certain types of `IOHandler`s\r\n   * as URL-like string shortcuts, such as 'localstorage://' and\r\n   * 'indexeddb://'.\r\n   *\r\n   * Example 1: Save `model`'s topology and weights to browser [local\r\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\r\n   * then load it back.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential(\r\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n   * console.log('Prediction from original model:');\r\n   * model.predict(tf.ones([1, 3])).print();\r\n   *\r\n   * const saveResults = await model.save('localstorage://my-model-1');\r\n   *\r\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\r\n   * console.log('Prediction from loaded model:');\r\n   * loadedModel.predict(tf.ones([1, 3])).print();\r\n   * ```\r\n   *\r\n   * Example 2. Saving `model`'s topology and weights to browser\r\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\r\n   * then load it back.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential(\r\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n   * console.log('Prediction from original model:');\r\n   * model.predict(tf.ones([1, 3])).print();\r\n   *\r\n   * const saveResults = await model.save('indexeddb://my-model-1');\r\n   *\r\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\r\n   * console.log('Prediction from loaded model:');\r\n   * loadedModel.predict(tf.ones([1, 3])).print();\r\n   * ```\r\n   *\r\n   * Example 3. Saving `model`'s topology and weights as two files\r\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\r\n   * browser.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential(\r\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n   * const saveResults = await model.save('downloads://my-model-1');\r\n   * ```\r\n   *\r\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\r\n   * See the documentation of `tf.io.http` for more details\r\n   * including specifying request parameters and implementation of the\r\n   * server.\r\n   *\r\n   * ```js\r\n   * const model = tf.sequential(\r\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\r\n   * const saveResults = await model.save('http://my-server/model/upload');\r\n   * ```\r\n   *\r\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\r\n   * scheme-based string shortcut for `IOHandler`.\r\n   * @param config Options for saving the model.\r\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\r\n   * the saving, such as byte sizes of the saved artifacts for the model's\r\n   *   topology and weight values.\r\n   *\r\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\r\n   */\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n    const weightDataAndSpecs = await io.encodeWeights(this.getNamedWeights(config));\n    const returnString = false;\n    const unusedArg = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null\n    };\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {\n        data: optimizerWeightData,\n        specs: optimizerWeightSpecs\n      } = await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n    }\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n  /**\r\n   * Set user-defined metadata.\r\n   *\r\n   * The set metadata will be serialized together with the topology\r\n   * and weights of the model during `save()` calls.\r\n   *\r\n   * @param setUserDefinedMetadata\r\n   */\n  setUserDefinedMetadata(userDefinedMetadata) {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n  /**\r\n   * Get user-defined metadata.\r\n   *\r\n   * The metadata is supplied via one of the two routes:\r\n   *   1. By calling `setUserDefinedMetadata()`.\r\n   *   2. Loaded during model loading (if the model is constructed\r\n   *      via `tf.loadLayersModel()`.)\r\n   *\r\n   * If no user-defined metadata is available from either of the\r\n   * two routes, this function will return `undefined`.\r\n   */\n  getUserDefinedMetadata() {\n    return this.userDefinedMetadata;\n  }\n}\n// The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n/** @nocollapse */\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\r\n * A `tf.Functional` is an alias to `tf.LayersModel`.\r\n *\r\n * See also:\r\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\r\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {}\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);","map":null,"metadata":{},"sourceType":"module"}