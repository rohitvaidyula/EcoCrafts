{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2017 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n  return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 : TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n  let checkClassType = true;\n  if (isTypedArray(actual) || isTypedArray(expected)) {\n    checkClassType = false;\n  }\n  if (isTypedArray(actual) && isTypedArray(expected)) {\n    checkClassType = true;\n  }\n  if (checkClassType) {\n    const aType = actual.constructor.name;\n    const bType = expected.constructor.name;\n    if (aType !== bType) {\n      throw new Error(`Arrays are of different type. Actual: ${aType}. ` + `Expected: ${bType}`);\n    }\n  }\n  if (Array.isArray(actual) && Array.isArray(expected)) {\n    const actualShape = inferShape(actual);\n    const expectedShape = inferShape(expected);\n    if (!arraysEqual(actualShape, expectedShape)) {\n      throw new Error(`Arrays have different shapes. ` + `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n    }\n  }\n  const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n  const expectedFlat = isTypedArray(expected) ? expected : flatten(expected);\n  if (actualFlat.length !== expectedFlat.length) {\n    throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` + `expected: ${expectedFlat.length}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n  }\n  for (let i = 0; i < expectedFlat.length; ++i) {\n    const a = actualFlat[i];\n    const e = expectedFlat[i];\n    if (!predicate(a, e)) {\n      throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` + `Actual:   ${actualFlat}.\\n` + `Expected: ${expectedFlat}.`);\n    }\n  }\n}\nexport function expectPromiseToFail(fn, done) {\n  fn().then(() => done.fail(), () => done());\n}\nexport function expectArraysEqual(actual, expected) {\n  const exp = typeof expected === 'string' || typeof expected === 'number' || typeof expected === 'boolean' ? [expected] : expected;\n  if (isString(actual) || isString(actual[0]) || isString(expected) || isString(expected[0])) {\n    // tslint:disable-next-line: triple-equals\n    return expectArraysPredicate(actual, exp, (a, b) => a == b);\n  }\n  return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n  }\n}\nfunction areClose(a, e, epsilon) {\n  if (!isFinite(a) && !isFinite(e)) {\n    return true;\n  }\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n  return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n  for (let i = 0; i < actual.length; i++) {\n    if (actual[i] < low || actual[i] > high) {\n      throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n    }\n  }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n  // Safari & Jasmine don't like comparing ArrayBuffers directly. Wrapping in\n  // a Float32Array solves this issue.\n  expect(new Float32Array(actual)).toEqual(new Float32Array(expected));\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n  for (let i = 0; i < a.length; i++) {\n    const val = a[i];\n    if (Array.isArray(val)) {\n      encodeStrings(val);\n    } else {\n      a[i] = encodeString(val);\n    }\n  }\n  return a;\n}","map":null,"metadata":{},"sourceType":"module"}