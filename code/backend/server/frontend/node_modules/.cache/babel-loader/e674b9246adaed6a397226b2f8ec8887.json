{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2018 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n *\r\n * =============================================================================\r\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\r\n * Represents a URL readable as a stream of binary data chunks.\r\n */\nexport class URLDataSource extends DataSource {\n  /**\r\n   * Create a `URLDataSource`.\r\n   *\r\n   * @param url A source URL string, or a `Request` object.\r\n   * @param options Options passed to the underlying `FileChunkIterator`s,\r\n   *   such as {chunksize: 1024}.\r\n   */\n  constructor(url, fileOptions = {}) {\n    super();\n    this.url = url;\n    this.fileOptions = fileOptions;\n  }\n  // TODO(soergel): provide appropriate caching options.  Currently this\n  // will download the URL anew for each call to iterator().  Since we have\n  // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n  // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n  async iterator() {\n    if (isLocalPath(this.url)) {\n      return new FileDataSource(this.url, this.fileOptions).iterator();\n    } else {\n      return urlChunkIterator(this.url, this.fileOptions);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"module"}