{"ast":null,"code":"/**\r\n * @license\r\n * Copyright 2020 Google LLC. All Rights Reserved.\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n * http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n * =============================================================================\r\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\r\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\r\n * value `onValue` (defaults to 1), while all other locations take value\r\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\r\n * `R+1` with the last axis of size `depth`.\r\n *\r\n * ```js\r\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\r\n * ```\r\n *\r\n * @param indices `tf.Tensor` of indices with dtype `int32`.\r\n * @param depth The depth of the one hot dimension.\r\n * @param onValue A number used to fill in the output when the index matches\r\n * the location.\r\n * @param offValue A number used to fill in the output when the index does\r\n *     not match the location.\r\n *\r\n * @doc {heading: 'Tensors', subheading: 'Creation'}\r\n */\nfunction oneHot_(indices, depth, onValue = 1, offValue = 0) {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  const inputs = {\n    indices: $indices\n  };\n  const attrs = {\n    depth,\n    onValue,\n    offValue\n  };\n  return ENGINE.runKernel(OneHot, inputs, attrs);\n}\nexport const oneHot = op({\n  oneHot_\n});","map":null,"metadata":{},"sourceType":"module"}