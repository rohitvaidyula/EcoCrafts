{"version":3,"sources":["components/Homepage/Homepage.js","App.js","index.js"],"names":["coordinate_array","Homepage","webcamRef","useRef","name","setName","useState","materials","setMaterials","recipes","setRecipes","latitude","setLatitude","longitude","setLongitude","infoWindowVis","setInfoWindowVis","navigator","geolocation","getCurrentPosition","position","coords","console","log","fetch","method","headers","body","concat","then","response","json","data","setDefaults","key","language","places","forEach","place","fromAddress","formattedAddress","_ref","results","lat","lng","geometry","location","push","init_center","captureImg","useCallback","imageString","current","getScreenshot","requestSetting","JSON","stringify","image","Name","material","Material","recipe","Recipe","replace","catch","error","React","createElement","className","Webcam","ref","height","width","minScreenshotHeight","minScreenshotWidth","screenshotFormat","Button","variant","onClick","split","map","string","src","alt","GoogleMap","mapContainerStyle","zoom","center","coord","Marker","InfoWindow","href","App","Routes","Route","exact","path","element","ReactDOM","render","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.ebe29261.chunk.js","sourcesContent":["import React, { useCallback, useRef, useState } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { GoogleMap, Marker, InfoWindow } from '@react-google-maps/api';\r\nimport {\r\n    setDefaults,\r\n    fromAddress,\r\n  } from \"react-geocode\";\r\n\r\nimport \"./Homepage.css\";\r\n\r\nconst coordinate_array = [];\r\n\r\nfunction Homepage() {\r\n    const webcamRef = useRef(null);\r\n    const [name, setName] = useState(\"\");\r\n    const [materials, setMaterials] = useState(\"\");\r\n    const [recipes, setRecipes] = useState(\"\");\r\n    const [latitude, setLatitude] = useState(null);\r\n    const [longitude, setLongitude] = useState(null);\r\n    const [infoWindowVis, setInfoWindowVis] = useState(false);\r\n\r\n    const mapContainerStyle = {\r\n        width: '40vw',\r\n        height: '40vh',\r\n    };\r\n\r\n    const getLocation = () => {\r\n        if (!navigator.geolocation) {\r\n            console.log(\"map don't work cuhz\");\r\n        } else {\r\n            navigator.geolocation.getCurrentPosition(\r\n                (position) => {\r\n                    setLatitude(position.coords.latitude);\r\n                    setLongitude(position.coords.longitude);\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    const getMarkers = () => {\r\n        fetch('https://places.googleapis.com/v1/places:searchText', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Goog-Api-Key': 'AIzaSyCnsJR0l_GjIBQ6GGPgoGMgWue8SWJFytQ',\r\n            'X-Goog-FieldMask': 'places.displayName,places.formattedAddress'\r\n            },\r\n            body: `{\\n  \"textQuery\" : \"Plastic Recycling Center\",\\n  \"maxResultCount\": 7,\\n  \"locationBias\": {\\n    \"circle\": {\\n      \"center\": {\"latitude\": ${latitude}, \"longitude\": ${longitude}},\\n      \"radius\": 25000.0\\n    }\\n  },\\n}`\r\n        }).then(response => response.json())\r\n        .then(data => {\r\n            setDefaults({\r\n                key: \"AIzaSyCnsJR0l_GjIBQ6GGPgoGMgWue8SWJFytQ\",\r\n                language: \"en\"\r\n            });\r\n            const places = data.places;\r\n            places.forEach((place) => {\r\n                fromAddress(place.formattedAddress)\r\n                    .then(({results}) =>{\r\n                        const {lat, lng} = results[0].geometry.location;\r\n                        coordinate_array.push({\r\n                            \"address\": place.formattedAddress,\r\n                            \"lat\": lat,\r\n                            \"lng\": lng,\r\n                        })\r\n                    })\r\n            })\r\n        });\r\n    }\r\n\r\n    \r\n    getLocation();\r\n    getMarkers();\r\n\r\n    const init_center = {\r\n        lat: latitude,\r\n        lng: longitude\r\n    };\r\n\r\n    const captureImg = useCallback(() => {\r\n        const imageString = webcamRef.current.getScreenshot();\r\n        const requestSetting = {\r\n           method: 'POST',\r\n           headers: {'Content-Type': 'application/json' },\r\n           body: JSON.stringify({\r\n                image: imageString\r\n           })\r\n        };\r\n\r\n        fetch('/send_image', requestSetting)\r\n\r\n        fetch('/results')\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            let name = data.recipes[0].Name;\r\n            let material = data.recipes[0].Material;\r\n            let recipe = data.recipes[0].Recipe;\r\n            name.replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\r\n            material.replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\r\n            recipe.replace(/(\\r\\n|\\r|\\n)/g, '<br/>');\r\n            setName(name);\r\n            setMaterials(material);\r\n            setRecipes(recipe);\r\n        })\r\n        .catch(error => console.error(error));\r\n    }, [webcamRef]);\r\n\r\n    \r\n\r\n    return(\r\n        <div className=\"homepage finger-paint-regular\">\r\n            <div className=\"Title\">\r\n                <h1>EcoCrafts!</h1>\r\n                <p>Scan your solid waste.</p>\r\n            </div>\r\n\r\n            <div className=\"Camera\">\r\n            <Webcam \r\n                ref={webcamRef}\r\n                height={640}\r\n                width={640}\r\n                minScreenshotHeight={640}\r\n                minScreenshotWidth={640}\r\n                screenshotFormat=\"image/jpeg\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"ScreenshotButton\">\r\n                <Button variant=\"primary\" onClick={captureImg}> Capture Screenshot</Button> \r\n            </div>\r\n\r\n            <div className=\"Results\">\r\n                <h2>Recipe</h2>\r\n                <p>Capture Screenshot of item to view the recipe!</p>\r\n                <div>\r\n                    Recipe Name: {name}\r\n                </div>\r\n                <div>\r\n                    {materials.split(\"\\n\").map((string) => (\r\n                        <p>{string}</p>\r\n                    ))}\r\n                </div>\r\n                <div>\r\n                    {recipes.split(\"\\n\").map((string) => (\r\n                        <p>{string}</p>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"About\">\r\n            <h2><b>About</b></h2>\r\n                <p>\r\n                EcoCrafts offers an engaging educational experience, introducing homegrown Indian agricultural, recreational, and lifestyle techniques to creatively upcycle solid waste. Through crowdsourcing methods and real-time object detection, EcoCrafts scales these recipes to a broader public, contributing to a more environmentally friendly and sustainable world.\r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"Upcycling\">\r\n            <h2><b>What is upcycling?</b></h2>\r\n                <p>Upcycling is the creative process of transforming discarded or unused materials into new products of higher value or quality. For example, turning paper \r\n                   cups into an art display!\r\n                </p>\r\n            </div>\r\n            \r\n            <div className=\"Activity\">\r\n            <h2><b>The Activity</b></h2>\r\n                <p>1.  Scan your solid waste by capturing a screenshot.</p>\r\n                <p>2.  View upcycling recipes.</p>\r\n                <p>3.  Collect additional materials.</p>\r\n                <p>4.  Complete activity.</p>\r\n                <p>5.  Upload personalized recipes.</p>\r\n            </div>\r\n\r\n            <div className=\"Curriculum\">\r\n            <h2><b>Curriculum</b></h2>\r\n                <img src=\"./activityrowimg.png\" alt=\"\"/>\r\n            </div>\r\n\r\n            <div className=\"Map\">\r\n                <h2><b>Find Materials in Your Locality</b></h2>\r\n                <p>Travel with a parent or guardian.</p>\r\n                <h3>\r\n                    <GoogleMap\r\n                        mapContainerStyle={mapContainerStyle}\r\n                        zoom={10}\r\n                        center={init_center}\r\n                    >\r\n                    {coordinate_array.map((coord) => (\r\n                            <Marker \r\n                                position={{lat: coord.lat, lng: coord.lng}}\r\n                                onClick={() => setInfoWindowVis(!infoWindowVis)}\r\n                            >\r\n                                {infoWindowVis && (\r\n                                    <InfoWindow position={{lat: coord.lat, lng: coord.lng}}>\r\n                                        <p>{coord.formattedAddress}</p>\r\n                                    </InfoWindow>\r\n                                )}\r\n                            </Marker>\r\n                    ))}\r\n                    </GoogleMap>\r\n                </h3>\r\n            </div>\r\n\r\n            <div className=\"Upload\">\r\n            <h2><b>Upload Yours</b></h2>\r\n            <a href=\"https://d06bj4iwir2.typeform.com/to/yRScudbg\">\r\n                <img alt = \"Stuff\" src=\"./uploadicon.png\" width=\"70px\" height=\"70px\"/>\r\n            </a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Homepage;","// Import dependencies\r\nimport React from \"react\";\r\nimport {Routes, Route } from 'react-router-dom';\r\nimport \"./App.css\";\r\nimport Homepage from \"./components/Homepage/Homepage\";\r\n\r\nfunction App() {\r\n  return(\r\n    <div className=\"app\">\r\n      <Routes>\r\n        <Route exact path = \"/\" element = {<Homepage />} />\r\n      </Routes>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n     <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}